
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c6  00800100  00001792  00001826  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001792  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000052  008001c6  008001c6  000018ec  2**0
                  ALLOC
  3 .stab         00002b68  00000000  00000000  000018ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001ec5  00000000  00000000  00004454  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00006319  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000120  00000000  00000000  00006330  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000006ae  00000000  00000000  00006450  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000b4  00000000  00000000  00006afe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000003a0  00000000  00000000  00006bb2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__ctors_end>
       4:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
       8:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
       c:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
      10:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
      14:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
      18:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
      1c:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
      20:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
      24:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
      28:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
      2c:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
      30:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
      34:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
      38:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__vector_14>
      3c:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
      40:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
      44:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
      48:	0c 94 2d 06 	jmp	0xc5a	; 0xc5a <__vector_18>
      4c:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
      50:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
      54:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
      58:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
      5c:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
      60:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
      64:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>

00000068 <FLASHSTRING_TIME>:
      68:	31 38 3a 33 32 3a 35 36 00                          18:32:56.

00000071 <FLASHSTRING_DATE>:
      71:	4d 61 72 20 32 32 20 32 30 31 38 00                 Mar 22 2018.

0000007d <FLASHSTRING_WELCOME>:
      7d:	0a 0d 50 72 6f 67 72 61 6d 6d 20 3f 3f 20 00        ..Programm ?? .

0000008c <MON_PMEMSTR_CMDS>:
      8c:	b0 00 1d 01 94 00 ee 00                             ........

00000094 <MON_PMEM_CMD_TEST>:
      94:	74 65 73 74 00 63 6f 6d 6d 61 6e 64 6f 20 66 6f     test.commando fo
      a4:	72 20 74 65 73 74 00 74 65 73 74 00                 r test.test.

000000b0 <MON_PMEM_CMD_INFO>:
      b0:	69 6e 66 6f 00 41 70 70 6c 69 63 61 74 69 6f 6e     info.Application
      c0:	20 69 6e 66 6f 73 00 69 6e 66 6f 00                  infos.info.

000000cc <MON_LINE_WELCOME>:
      cc:	4c 69 6e 65 2d 4d 6f 64 65 3a 20 43 54 52 4c 2d     Line-Mode: CTRL-
      dc:	58 2c 20 43 54 52 4c 2d 59 2c 20 43 54 52 4c 2d     X, CTRL-Y, CTRL-
      ec:	43 2c 20 52 65 74 75 72 6e 20 20 0a 0d 00           C, Return  ...

000000fa <SYS_PMEMSTR_CMDS>:
      fa:	20 01 d2 03 02 01 bb 02                              .......

00000102 <SYS_PMEM_CMD_SINFO>:
     102:	73 69 6e 66 6f 00 53 79 73 74 65 6d 69 6e 66 6f     sinfo.Systeminfo
     112:	72 6d 61 74 69 6f 6e 00 73 69 6e 66 6f 00           rmation.sinfo.

00000120 <SYS_PMEM_CMD_HELP>:
     120:	68 65 6c 70 00 4c 69 73 74 20 6f 66 20 61 6c 6c     help.List of all
     130:	20 63 6f 6d 6d 61 6e 64 73 00 68 65 6c 70 00         commands.help.

0000013f <SYS_PMEM_ERR2>:
     13f:	20 2d 3e 20 53 79 6e 74 61 78 20 65 72 72 6f 72      -> Syntax error
     14f:	0a 0d 55 73 61 67 65 3a 20 00                       ..Usage: .

00000159 <SYS_PMEM_ERR1>:
     159:	45 72 72 6f 72 3a 20 55 6e 6b 6e 6f 77 6e 20 63     Error: Unknown c
     169:	6f 6d 6d 61 6e 64 0a 0d 00                          ommand...

00000172 <SYS_PMEM_ERR0>:
     172:	45 72 72 6f 72 20 00                                Error .

00000179 <SYS_PMEM_LINESTART>:
     179:	0a 0d 3e 00 00                                      ..>..

0000017e <__ctors_end>:
     17e:	11 24       	eor	r1, r1
     180:	1f be       	out	0x3f, r1	; 63
     182:	cf ef       	ldi	r28, 0xFF	; 255
     184:	d8 e0       	ldi	r29, 0x08	; 8
     186:	de bf       	out	0x3e, r29	; 62
     188:	cd bf       	out	0x3d, r28	; 61

0000018a <__do_copy_data>:
     18a:	11 e0       	ldi	r17, 0x01	; 1
     18c:	a0 e0       	ldi	r26, 0x00	; 0
     18e:	b1 e0       	ldi	r27, 0x01	; 1
     190:	e2 e9       	ldi	r30, 0x92	; 146
     192:	f7 e1       	ldi	r31, 0x17	; 23
     194:	02 c0       	rjmp	.+4      	; 0x19a <__do_copy_data+0x10>
     196:	05 90       	lpm	r0, Z+
     198:	0d 92       	st	X+, r0
     19a:	a6 3c       	cpi	r26, 0xC6	; 198
     19c:	b1 07       	cpc	r27, r17
     19e:	d9 f7       	brne	.-10     	; 0x196 <__do_copy_data+0xc>

000001a0 <__do_clear_bss>:
     1a0:	22 e0       	ldi	r18, 0x02	; 2
     1a2:	a6 ec       	ldi	r26, 0xC6	; 198
     1a4:	b1 e0       	ldi	r27, 0x01	; 1
     1a6:	01 c0       	rjmp	.+2      	; 0x1aa <.do_clear_bss_start>

000001a8 <.do_clear_bss_loop>:
     1a8:	1d 92       	st	X+, r1

000001aa <.do_clear_bss_start>:
     1aa:	a8 31       	cpi	r26, 0x18	; 24
     1ac:	b2 07       	cpc	r27, r18
     1ae:	e1 f7       	brne	.-8      	; 0x1a8 <.do_clear_bss_loop>
     1b0:	0e 94 f5 06 	call	0xdea	; 0xdea <main>
     1b4:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <_exit>

000001b8 <__bad_interrupt>:
     1b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001bc <app_init>:

// functions

void app_init (void)
{
    memset((void *)&app, 0, sizeof(app));
     1bc:	10 92 cd 01 	sts	0x01CD, r1
    DDRB = 0x20;
     1c0:	80 e2       	ldi	r24, 0x20	; 32
     1c2:	84 b9       	out	0x04, r24	; 4
     1c4:	08 95       	ret

000001c6 <app_main>:

//--------------------------------------------------------

void app_main (void)
{
    sys_setLed(1);
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	0c 94 95 03 	jmp	0x72a	; 0x72a <sys_setLed>

000001cc <app_task_1ms>:
}

//--------------------------------------------------------

void app_task_1ms (void) {}
     1cc:	08 95       	ret

000001ce <app_task_2ms>:
void app_task_2ms (void) {}
     1ce:	08 95       	ret

000001d0 <app_task_4ms>:
void app_task_4ms (void) {}
     1d0:	08 95       	ret

000001d2 <app_task_8ms>:
void app_task_8ms (void) {}
     1d2:	08 95       	ret

000001d4 <app_task_16ms>:
void app_task_16ms (void) {}
     1d4:	08 95       	ret

000001d6 <app_task_32ms>:
void app_task_32ms (void) {}
     1d6:	08 95       	ret

000001d8 <app_task_64ms>:
void app_task_64ms (void) {}
     1d8:	08 95       	ret

000001da <app_task_128ms>:
void app_task_128ms (void) {}
     1da:	08 95       	ret

000001dc <mon_cmd_test>:
    return 0;
}


int8_t mon_cmd_test (uint8_t argc, char *argv[])
{
     1dc:	df 92       	push	r13
     1de:	ef 92       	push	r14
     1e0:	ff 92       	push	r15
     1e2:	0f 93       	push	r16
     1e4:	1f 93       	push	r17
     1e6:	cf 93       	push	r28
     1e8:	df 93       	push	r29
     1ea:	d8 2e       	mov	r13, r24
     1ec:	8b 01       	movw	r16, r22
    uint8_t i;
    
    for (i = 0; i<argc; i++)
     1ee:	c0 e0       	ldi	r28, 0x00	; 0
     1f0:	d0 e0       	ldi	r29, 0x00	; 0
        printf("%u: %s\n\r", i, argv[i]);
     1f2:	8c e1       	ldi	r24, 0x1C	; 28
     1f4:	e8 2e       	mov	r14, r24
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	f8 2e       	mov	r15, r24

int8_t mon_cmd_test (uint8_t argc, char *argv[])
{
    uint8_t i;
    
    for (i = 0; i<argc; i++)
     1fa:	cd 15       	cp	r28, r13
     1fc:	a8 f4       	brcc	.+42     	; 0x228 <mon_cmd_test+0x4c>
        printf("%u: %s\n\r", i, argv[i]);
     1fe:	f8 01       	movw	r30, r16
     200:	80 81       	ld	r24, Z
     202:	91 81       	ldd	r25, Z+1	; 0x01
     204:	0e 5f       	subi	r16, 0xFE	; 254
     206:	1f 4f       	sbci	r17, 0xFF	; 255
     208:	9f 93       	push	r25
     20a:	8f 93       	push	r24
     20c:	df 93       	push	r29
     20e:	cf 93       	push	r28
     210:	ff 92       	push	r15
     212:	ef 92       	push	r14
     214:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <printf>
     218:	21 96       	adiw	r28, 0x01	; 1
     21a:	0f 90       	pop	r0
     21c:	0f 90       	pop	r0
     21e:	0f 90       	pop	r0
     220:	0f 90       	pop	r0
     222:	0f 90       	pop	r0
     224:	0f 90       	pop	r0
     226:	e9 cf       	rjmp	.-46     	; 0x1fa <mon_cmd_test+0x1e>
    
    return 0;
}
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	df 91       	pop	r29
     22c:	cf 91       	pop	r28
     22e:	1f 91       	pop	r17
     230:	0f 91       	pop	r16
     232:	ff 90       	pop	r15
     234:	ef 90       	pop	r14
     236:	df 90       	pop	r13
     238:	08 95       	ret

0000023a <mon_cmd_info>:
// Monitor commands of the application
// --------------------------------------------------------

int8_t mon_cmd_info (uint8_t argc, char *argv[])
{
    printf("app.flags_u8  : ");
     23a:	85 e2       	ldi	r24, 0x25	; 37
     23c:	91 e0       	ldi	r25, 0x01	; 1
     23e:	9f 93       	push	r25
     240:	8f 93       	push	r24
     242:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <printf>
    sys_printHexBin8(sys.flags_u8);
     246:	80 91 fa 01 	lds	r24, 0x01FA
     24a:	0e 94 a0 02 	call	0x540	; 0x540 <sys_printHexBin8>
    sys_newline();
     24e:	0e 94 0c 02 	call	0x418	; 0x418 <sys_newline>
    return 0;
     252:	0f 90       	pop	r0
     254:	0f 90       	pop	r0
}
     256:	80 e0       	ldi	r24, 0x00	; 0
     258:	08 95       	ret

0000025a <mon_init>:

// functions

void mon_init (void)
{
    memset((void *)&mon, 0, sizeof(mon));
     25a:	10 92 ce 01 	sts	0x01CE, r1
     25e:	08 95       	ret

00000260 <mon_main>:


//--------------------------------------------------------

inline void mon_main (void)
{
     260:	08 95       	ret

00000262 <mon_getCmdCount>:
}

inline uint8_t mon_getCmdCount (void)
{
    return sizeof(MON_PMEMSTR_CMDS)/sizeof(struct Sys_MonCmdInfo);
}
     262:	82 e0       	ldi	r24, 0x02	; 2
     264:	08 95       	ret

00000266 <mon_printLineHeader>:
// Monitor-Line for continues output
// --------------------------------------------------------

int8_t mon_printLineHeader (uint8_t lineIndex)
{
    if (lineIndex==0)
     266:	81 11       	cpse	r24, r1
     268:	0e c0       	rjmp	.+28     	; 0x286 <mon_printLineHeader+0x20>
        sys_printString_P(MON_LINE_WELCOME);
     26a:	8c ec       	ldi	r24, 0xCC	; 204
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	0e 94 15 02 	call	0x42a	; 0x42a <sys_printString_P>
    
    switch (lineIndex)
    {
        case 0: printf("L0 | app.flags_u8"); return 20;
     272:	86 e3       	ldi	r24, 0x36	; 54
     274:	91 e0       	ldi	r25, 0x01	; 1
     276:	9f 93       	push	r25
     278:	8f 93       	push	r24
     27a:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <printf>
     27e:	0f 90       	pop	r0
     280:	0f 90       	pop	r0
     282:	84 e1       	ldi	r24, 0x14	; 20
     284:	08 95       	ret
int8_t mon_printLineHeader (uint8_t lineIndex)
{
    if (lineIndex==0)
        sys_printString_P(MON_LINE_WELCOME);
    
    switch (lineIndex)
     286:	81 30       	cpi	r24, 0x01	; 1
     288:	51 f4       	brne	.+20     	; 0x29e <mon_printLineHeader+0x38>
    {
        case 0: printf("L0 | app.flags_u8"); return 20;
        case 1: printf("L1 | counter  (press 'c' for reset)"); return 40;
     28a:	88 e4       	ldi	r24, 0x48	; 72
     28c:	91 e0       	ldi	r25, 0x01	; 1
     28e:	9f 93       	push	r25
     290:	8f 93       	push	r24
     292:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <printf>
     296:	0f 90       	pop	r0
     298:	0f 90       	pop	r0
     29a:	88 e2       	ldi	r24, 0x28	; 40
     29c:	08 95       	ret
        default: return -1; // this line index is not valid
     29e:	8f ef       	ldi	r24, 0xFF	; 255
    }
}
     2a0:	08 95       	ret

000002a2 <mon_printLine>:

int8_t mon_printLine   (uint8_t lineIndex, char keyPressed)
{
    
    switch (lineIndex)
     2a2:	88 23       	and	r24, r24
     2a4:	19 f0       	breq	.+6      	; 0x2ac <mon_printLine+0xa>
     2a6:	81 30       	cpi	r24, 0x01	; 1
     2a8:	79 f0       	breq	.+30     	; 0x2c8 <mon_printLine+0x26>
     2aa:	2d c0       	rjmp	.+90     	; 0x306 <mon_printLine+0x64>
    {
        case 0:
            printf("   | "); sys_printBin(app.flags_u8, 0);
     2ac:	8c e6       	ldi	r24, 0x6C	; 108
     2ae:	91 e0       	ldi	r25, 0x01	; 1
     2b0:	9f 93       	push	r25
     2b2:	8f 93       	push	r24
     2b4:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <printf>
     2b8:	80 91 cd 01 	lds	r24, 0x01CD
     2bc:	60 e0       	ldi	r22, 0x00	; 0
     2be:	0e 94 66 02 	call	0x4cc	; 0x4cc <sys_printBin>
            return 2;
     2c2:	0f 90       	pop	r0
     2c4:	0f 90       	pop	r0
     2c6:	1d c0       	rjmp	.+58     	; 0x302 <mon_printLine+0x60>
            
        case 1:
        {
            static uint16_t cnt = 0;
            if (keyPressed=='c')
     2c8:	63 36       	cpi	r22, 0x63	; 99
     2ca:	21 f4       	brne	.+8      	; 0x2d4 <mon_printLine+0x32>
                cnt = 0;
     2cc:	10 92 c7 01 	sts	0x01C7, r1
     2d0:	10 92 c6 01 	sts	0x01C6, r1
            printf("   |  0x%04x   ", cnt++);
     2d4:	80 91 c6 01 	lds	r24, 0x01C6
     2d8:	90 91 c7 01 	lds	r25, 0x01C7
     2dc:	9c 01       	movw	r18, r24
     2de:	2f 5f       	subi	r18, 0xFF	; 255
     2e0:	3f 4f       	sbci	r19, 0xFF	; 255
     2e2:	30 93 c7 01 	sts	0x01C7, r19
     2e6:	20 93 c6 01 	sts	0x01C6, r18
     2ea:	9f 93       	push	r25
     2ec:	8f 93       	push	r24
     2ee:	82 e7       	ldi	r24, 0x72	; 114
     2f0:	91 e0       	ldi	r25, 0x01	; 1
     2f2:	9f 93       	push	r25
     2f4:	8f 93       	push	r24
     2f6:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <printf>
        }
            return 2;
     2fa:	0f 90       	pop	r0
     2fc:	0f 90       	pop	r0
     2fe:	0f 90       	pop	r0
     300:	0f 90       	pop	r0
     302:	82 e0       	ldi	r24, 0x02	; 2
     304:	08 95       	ret
            
        default: return -1;
     306:	8f ef       	ldi	r24, 0xFF	; 255
    }
}
     308:	08 95       	ret

0000030a <sys_uart_getch>:

//----------------------------------------------------------------------------

int sys_uart_getch (FILE *f)
{
    if (f != stdin)
     30a:	20 91 10 02 	lds	r18, 0x0210
     30e:	30 91 11 02 	lds	r19, 0x0211
     312:	28 17       	cp	r18, r24
     314:	39 07       	cpc	r19, r25
     316:	c1 f4       	brne	.+48     	; 0x348 <sys_uart_getch+0x3e>
        return _FDEV_EOF;
    if (sys.uart.wpos_u8 == sys.uart.rpos_u8) return _FDEV_EOF;
     318:	90 91 fe 01 	lds	r25, 0x01FE
     31c:	80 91 fd 01 	lds	r24, 0x01FD
     320:	98 17       	cp	r25, r24
     322:	91 f0       	breq	.+36     	; 0x348 <sys_uart_getch+0x3e>
    uint8_t c = sys.uart.rbuffer_u8[sys.uart.rpos_u8++];
     324:	e0 91 fd 01 	lds	r30, 0x01FD
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	8e 0f       	add	r24, r30
     32c:	80 93 fd 01 	sts	0x01FD, r24
     330:	f0 e0       	ldi	r31, 0x00	; 0
     332:	e6 50       	subi	r30, 0x06	; 6
     334:	fe 4f       	sbci	r31, 0xFE	; 254
     336:	86 81       	ldd	r24, Z+6	; 0x06
    if (sys.uart.rpos_u8>=GLOBAL_UART_RECBUFSIZE)
     338:	90 91 fd 01 	lds	r25, 0x01FD
     33c:	90 31       	cpi	r25, 0x10	; 16
     33e:	10 f0       	brcs	.+4      	; 0x344 <sys_uart_getch+0x3a>
        sys.uart.rpos_u8 = 0;
     340:	10 92 fd 01 	sts	0x01FD, r1
    return (int) c;
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	08 95       	ret
//----------------------------------------------------------------------------

int sys_uart_getch (FILE *f)
{
    if (f != stdin)
        return _FDEV_EOF;
     348:	8e ef       	ldi	r24, 0xFE	; 254
     34a:	9f ef       	ldi	r25, 0xFF	; 255
    if (sys.uart.wpos_u8 == sys.uart.rpos_u8) return _FDEV_EOF;
    uint8_t c = sys.uart.rbuffer_u8[sys.uart.rpos_u8++];
    if (sys.uart.rpos_u8>=GLOBAL_UART_RECBUFSIZE)
        sys.uart.rpos_u8 = 0;
    return (int) c;
}
     34c:	08 95       	ret

0000034e <sys_uart_putch>:


int sys_uart_putch (char c, FILE *f)
{
    if (f != stdout)
     34e:	20 91 12 02 	lds	r18, 0x0212
     352:	30 91 13 02 	lds	r19, 0x0213
     356:	62 17       	cp	r22, r18
     358:	73 07       	cpc	r23, r19
     35a:	41 f4       	brne	.+16     	; 0x36c <sys_uart_putch+0x1e>
        return _FDEV_EOF;
    while (!SYS_UART_UDR_IS_EMPTY);
     35c:	90 91 c0 00 	lds	r25, 0x00C0
     360:	95 ff       	sbrs	r25, 5
     362:	fc cf       	rjmp	.-8      	; 0x35c <sys_uart_putch+0xe>
    SYS_UDR = c;
     364:	80 93 c6 00 	sts	0x00C6, r24
    return (int)c;
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	08 95       	ret


int sys_uart_putch (char c, FILE *f)
{
    if (f != stdout)
        return _FDEV_EOF;
     36c:	8e ef       	ldi	r24, 0xFE	; 254
     36e:	9f ef       	ldi	r25, 0xFF	; 255
    while (!SYS_UART_UDR_IS_EMPTY);
    SYS_UDR = c;
    return (int)c;
}
     370:	08 95       	ret

00000372 <sys_init>:
static FILE mystdout = FDEV_SETUP_STREAM(sys_uart_putch, NULL, _FDEV_SETUP_WRITE);
static FILE mystdin  = FDEV_SETUP_STREAM(NULL, sys_uart_getch, _FDEV_SETUP_READ);

void sys_init (void)
{
    memset((void *)&sys, 0, sizeof(sys));
     372:	86 e1       	ldi	r24, 0x16	; 22
     374:	ea ef       	ldi	r30, 0xFA	; 250
     376:	f1 e0       	ldi	r31, 0x01	; 1
     378:	df 01       	movw	r26, r30
     37a:	1d 92       	st	X+, r1
     37c:	8a 95       	dec	r24
     37e:	e9 f7       	brne	.-6      	; 0x37a <sys_init+0x8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     380:	bf ef       	ldi	r27, 0xFF	; 255
     382:	22 e5       	ldi	r18, 0x52	; 82
     384:	87 e0       	ldi	r24, 0x07	; 7
     386:	b1 50       	subi	r27, 0x01	; 1
     388:	20 40       	sbci	r18, 0x00	; 0
     38a:	80 40       	sbci	r24, 0x00	; 0
     38c:	e1 f7       	brne	.-8      	; 0x386 <sys_init+0x14>
     38e:	00 c0       	rjmp	.+0      	; 0x390 <sys_init+0x1e>
     390:	00 00       	nop
    UCSR0A = (1<<U2X0);
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
    UCSR0B = (1 << RXCIE0) | (1 << TXEN0) | (1 << RXEN0);
    
#elif __AVR_ATmega328P__
    OCR0A  = (F_CPU+4)/8/10000-1;
     392:	87 ec       	ldi	r24, 0xC7	; 199
     394:	87 bd       	out	0x27, r24	; 39
    TCCR0A = (1 << WGM01);
     396:	82 e0       	ldi	r24, 0x02	; 2
     398:	84 bd       	out	0x24, r24	; 36
    TCCR0B = (1 << CS01);
     39a:	85 bd       	out	0x25, r24	; 37
    TIMSK0 = (1 << OCIE0A);
     39c:	80 93 6e 00 	sts	0x006E, r24
    TIFR0  = (1 << OCF0A);
     3a0:	85 bb       	out	0x15, r24	; 21
    UBRR0L = (F_CPU/GLOBAL_UART_BITRATE + 4)/8 - 1;
     3a2:	92 e2       	ldi	r25, 0x22	; 34
     3a4:	90 93 c4 00 	sts	0x00C4, r25
    UBRR0H = 0x00;
     3a8:	10 92 c5 00 	sts	0x00C5, r1
    UCSR0A = (1<<U2X0);
     3ac:	80 93 c0 00 	sts	0x00C0, r24
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
     3b0:	86 e0       	ldi	r24, 0x06	; 6
     3b2:	80 93 c2 00 	sts	0x00C2, r24
    UCSR0B = (1 << RXCIE0) | (1 << TXEN0) | (1 << RXEN0);
     3b6:	88 e9       	ldi	r24, 0x98	; 152
     3b8:	80 93 c1 00 	sts	0x00C1, r24
#ifdef SURE
    PORTA  =  0x0f;  // all LEDs off
    DDRA   =  0x0f;  // LEDs (PA3:0)
    DDRC  &= ~0xc0;  // Push Buttons SW1 (PC7) and SW2 (PC6)
#elif ARDUINO
    DDRB  = (1<< PB5); // LED L (yellow on pin PB5/SCK))
     3bc:	80 e2       	ldi	r24, 0x20	; 32
     3be:	84 b9       	out	0x04, r24	; 4
    PORTB = 0x00;
     3c0:	15 b8       	out	0x05, r1	; 5
    DDRB   =  0xff;  // 7-Seg anodes
#endif
    
    // connect libc functions printf(), gets()... to UART
    // fdevopen(sys_uart_putch, sys_uart_getch);
    stdout = &mystdout;
     3c2:	8e e0       	ldi	r24, 0x0E	; 14
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	90 93 13 02 	sts	0x0213, r25
     3ca:	80 93 12 02 	sts	0x0212, r24
    stdin  = &mystdin;
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	91 e0       	ldi	r25, 0x01	; 1
     3d2:	90 93 11 02 	sts	0x0211, r25
     3d6:	80 93 10 02 	sts	0x0210, r24
     3da:	08 95       	ret

000003dc <sys_inc8BitCnt>:

//----------------------------------------------------------------------------

uint8_t sys_inc8BitCnt (uint8_t count)
{
    return count<0xff ? count+1 : count;
     3dc:	8f 3f       	cpi	r24, 0xFF	; 255
     3de:	11 f0       	breq	.+4      	; 0x3e4 <sys_inc8BitCnt+0x8>
     3e0:	8f 5f       	subi	r24, 0xFF	; 255
     3e2:	08 95       	ret
     3e4:	8f ef       	ldi	r24, 0xFF	; 255
}
     3e6:	08 95       	ret

000003e8 <sys_inc16BitCnt>:


uint16_t sys_inc16BitCnt (uint16_t count)
{
    return count<0xffff ? count+1 : count;
     3e8:	8f 3f       	cpi	r24, 0xFF	; 255
     3ea:	2f ef       	ldi	r18, 0xFF	; 255
     3ec:	92 07       	cpc	r25, r18
     3ee:	11 f0       	breq	.+4      	; 0x3f4 <sys_inc16BitCnt+0xc>
     3f0:	01 96       	adiw	r24, 0x01	; 1
     3f2:	08 95       	ret
     3f4:	8f ef       	ldi	r24, 0xFF	; 255
     3f6:	9f ef       	ldi	r25, 0xFF	; 255
}
     3f8:	08 95       	ret

000003fa <sys_sei>:


void sys_sei (void)
{
    if (sys.flags_u8 & SYS_FLAG_SREG_I)
     3fa:	80 91 fa 01 	lds	r24, 0x01FA
     3fe:	87 ff       	sbrs	r24, 7
     400:	01 c0       	rjmp	.+2      	; 0x404 <sys_sei+0xa>
        sei();
     402:	78 94       	sei
     404:	08 95       	ret

00000406 <sys_cli>:
}


void sys_cli (void)
{
    sys.flags_u8 |= (SREG & 0x80);
     406:	ea ef       	ldi	r30, 0xFA	; 250
     408:	f1 e0       	ldi	r31, 0x01	; 1
     40a:	90 81       	ld	r25, Z
     40c:	8f b7       	in	r24, 0x3f	; 63
     40e:	80 78       	andi	r24, 0x80	; 128
     410:	89 2b       	or	r24, r25
     412:	80 83       	st	Z, r24
    cli();
     414:	f8 94       	cli
     416:	08 95       	ret

00000418 <sys_newline>:
}


void sys_newline (void)
{
    printf("\n\r");
     418:	83 ec       	ldi	r24, 0xC3	; 195
     41a:	91 e0       	ldi	r25, 0x01	; 1
     41c:	9f 93       	push	r25
     41e:	8f 93       	push	r24
     420:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <printf>
     424:	0f 90       	pop	r0
     426:	0f 90       	pop	r0
     428:	08 95       	ret

0000042a <sys_printString_P>:
}


void sys_printString_P (PGM_P str)
{
     42a:	0f 93       	push	r16
     42c:	1f 93       	push	r17
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	1f 92       	push	r1
     434:	cd b7       	in	r28, 0x3d	; 61
     436:	de b7       	in	r29, 0x3e	; 62
    char c;
    
    while (1)
    {
        memcpy_P(&c, str++, 1);
     438:	8c 01       	movw	r16, r24
     43a:	0f 5f       	subi	r16, 0xFF	; 255
     43c:	1f 4f       	sbci	r17, 0xFF	; 255
     43e:	41 e0       	ldi	r20, 0x01	; 1
     440:	50 e0       	ldi	r21, 0x00	; 0
     442:	bc 01       	movw	r22, r24
     444:	ce 01       	movw	r24, r28
     446:	01 96       	adiw	r24, 0x01	; 1
     448:	0e 94 55 08 	call	0x10aa	; 0x10aa <memcpy_P>
        if (!c) break;
     44c:	89 81       	ldd	r24, Y+1	; 0x01
     44e:	88 23       	and	r24, r24
     450:	49 f0       	breq	.+18     	; 0x464 <sys_printString_P+0x3a>
        putchar(c);
     452:	60 91 12 02 	lds	r22, 0x0212
     456:	70 91 13 02 	lds	r23, 0x0213
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	0e 94 ae 08 	call	0x115c	; 0x115c <fputc>
{
    char c;
    
    while (1)
    {
        memcpy_P(&c, str++, 1);
     460:	c8 01       	movw	r24, r16
        if (!c) break;
        putchar(c);
    }
     462:	ea cf       	rjmp	.-44     	; 0x438 <sys_printString_P+0xe>
}
     464:	0f 90       	pop	r0
     466:	df 91       	pop	r29
     468:	cf 91       	pop	r28
     46a:	1f 91       	pop	r17
     46c:	0f 91       	pop	r16
     46e:	08 95       	ret

00000470 <sys_puts_P>:


void sys_puts_P (PGM_P str)
{
    sys_printString_P(str);
     470:	0e 94 15 02 	call	0x42a	; 0x42a <sys_printString_P>
    sys_newline();
     474:	0c 94 0c 02 	jmp	0x418	; 0x418 <sys_newline>

00000478 <sys_getByte>:
}

#ifdef GLOBAL_MONITOR

int16_t sys_getByte (char typ, uint16_t add)
{
     478:	cf 93       	push	r28
     47a:	df 93       	push	r29
     47c:	1f 92       	push	r1
     47e:	cd b7       	in	r28, 0x3d	; 61
     480:	de b7       	in	r29, 0x3e	; 62
    uint8_t value = 0;
     482:	19 82       	std	Y+1, r1	; 0x01
    
    switch (typ)
     484:	86 36       	cpi	r24, 0x66	; 102
     486:	29 f0       	breq	.+10     	; 0x492 <sys_getByte+0x1a>
     488:	83 37       	cpi	r24, 0x73	; 115
     48a:	61 f0       	breq	.+24     	; 0x4a4 <sys_getByte+0x2c>
     48c:	85 36       	cpi	r24, 0x65	; 101
     48e:	c1 f4       	brne	.+48     	; 0x4c0 <sys_getByte+0x48>
     490:	11 c0       	rjmp	.+34     	; 0x4b4 <sys_getByte+0x3c>
    {
        case 'f': // flash
            if (add>FLASHEND) return -1;
     492:	77 fd       	sbrc	r23, 7
     494:	15 c0       	rjmp	.+42     	; 0x4c0 <sys_getByte+0x48>
            memcpy_P(&value, (PGM_P) add, 1);
     496:	41 e0       	ldi	r20, 0x01	; 1
     498:	50 e0       	ldi	r21, 0x00	; 0
     49a:	ce 01       	movw	r24, r28
     49c:	01 96       	adiw	r24, 0x01	; 1
     49e:	0e 94 55 08 	call	0x10aa	; 0x10aa <memcpy_P>
            break;
     4a2:	0b c0       	rjmp	.+22     	; 0x4ba <sys_getByte+0x42>
            
        case 's': // SRAM
            if (add>RAMEND ) return -1;
     4a4:	61 15       	cp	r22, r1
     4a6:	89 e0       	ldi	r24, 0x09	; 9
     4a8:	78 07       	cpc	r23, r24
     4aa:	50 f4       	brcc	.+20     	; 0x4c0 <sys_getByte+0x48>
            value = *((uint8_t *)add);
     4ac:	fb 01       	movw	r30, r22
     4ae:	80 81       	ld	r24, Z
     4b0:	89 83       	std	Y+1, r24	; 0x01
            break;
     4b2:	03 c0       	rjmp	.+6      	; 0x4ba <sys_getByte+0x42>
            
        case 'e': // EEPROM
            if (add>E2END) return -1;
     4b4:	61 15       	cp	r22, r1
     4b6:	74 40       	sbci	r23, 0x04	; 4
     4b8:	18 f4       	brcc	.+6      	; 0x4c0 <sys_getByte+0x48>
            
        default:
            return -1;
    }
    
    return value;
     4ba:	89 81       	ldd	r24, Y+1	; 0x01
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <sys_getByte+0x4c>
    uint8_t value = 0;
    
    switch (typ)
    {
        case 'f': // flash
            if (add>FLASHEND) return -1;
     4c0:	8f ef       	ldi	r24, 0xFF	; 255
     4c2:	9f ef       	ldi	r25, 0xFF	; 255
        default:
            return -1;
    }
    
    return value;
}
     4c4:	0f 90       	pop	r0
     4c6:	df 91       	pop	r29
     4c8:	cf 91       	pop	r28
     4ca:	08 95       	ret

000004cc <sys_printBin>:


void sys_printBin (uint8_t value, char sep)
{
     4cc:	df 92       	push	r13
     4ce:	ef 92       	push	r14
     4d0:	ff 92       	push	r15
     4d2:	0f 93       	push	r16
     4d4:	1f 93       	push	r17
     4d6:	cf 93       	push	r28
     4d8:	df 93       	push	r29
     4da:	e8 2e       	mov	r14, r24
     4dc:	d6 2e       	mov	r13, r22
    uint8_t i;
    
    for (i=0; i<8; i++,value<<=1)
     4de:	f1 2c       	mov	r15, r1
    {
        putchar(value&0x80 ? '1' : '0');
     4e0:	c1 e3       	ldi	r28, 0x31	; 49
     4e2:	d0 e0       	ldi	r29, 0x00	; 0
        if (i==3 && sep) putchar(sep);
     4e4:	06 2f       	mov	r16, r22
     4e6:	10 e0       	ldi	r17, 0x00	; 0
{
    uint8_t i;
    
    for (i=0; i<8; i++,value<<=1)
    {
        putchar(value&0x80 ? '1' : '0');
     4e8:	60 91 12 02 	lds	r22, 0x0212
     4ec:	70 91 13 02 	lds	r23, 0x0213
     4f0:	2e 2d       	mov	r18, r14
     4f2:	33 27       	eor	r19, r19
     4f4:	27 fd       	sbrc	r18, 7
     4f6:	30 95       	com	r19
     4f8:	20 95       	com	r18
     4fa:	30 95       	com	r19
     4fc:	22 27       	eor	r18, r18
     4fe:	33 0f       	add	r19, r19
     500:	22 1f       	adc	r18, r18
     502:	33 27       	eor	r19, r19
     504:	ce 01       	movw	r24, r28
     506:	82 1b       	sub	r24, r18
     508:	93 0b       	sbc	r25, r19
     50a:	0e 94 ae 08 	call	0x115c	; 0x115c <fputc>
        if (i==3 && sep) putchar(sep);
     50e:	83 e0       	ldi	r24, 0x03	; 3
     510:	f8 12       	cpse	r15, r24
     512:	09 c0       	rjmp	.+18     	; 0x526 <sys_printBin+0x5a>
     514:	dd 20       	and	r13, r13
     516:	39 f0       	breq	.+14     	; 0x526 <sys_printBin+0x5a>
     518:	60 91 12 02 	lds	r22, 0x0212
     51c:	70 91 13 02 	lds	r23, 0x0213
     520:	c8 01       	movw	r24, r16
     522:	0e 94 ae 08 	call	0x115c	; 0x115c <fputc>

void sys_printBin (uint8_t value, char sep)
{
    uint8_t i;
    
    for (i=0; i<8; i++,value<<=1)
     526:	f3 94       	inc	r15
     528:	ee 0c       	add	r14, r14
     52a:	88 e0       	ldi	r24, 0x08	; 8
     52c:	f8 12       	cpse	r15, r24
     52e:	dc cf       	rjmp	.-72     	; 0x4e8 <sys_printBin+0x1c>
    {
        putchar(value&0x80 ? '1' : '0');
        if (i==3 && sep) putchar(sep);
    }
}
     530:	df 91       	pop	r29
     532:	cf 91       	pop	r28
     534:	1f 91       	pop	r17
     536:	0f 91       	pop	r16
     538:	ff 90       	pop	r15
     53a:	ef 90       	pop	r14
     53c:	df 90       	pop	r13
     53e:	08 95       	ret

00000540 <sys_printHexBin8>:


void sys_printHexBin8 (uint8_t value)
{
     540:	cf 93       	push	r28
     542:	c8 2f       	mov	r28, r24
    printf("0x%02x (", value);
     544:	1f 92       	push	r1
     546:	8f 93       	push	r24
     548:	22 e8       	ldi	r18, 0x82	; 130
     54a:	31 e0       	ldi	r19, 0x01	; 1
     54c:	3f 93       	push	r19
     54e:	2f 93       	push	r18
     550:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <printf>
    sys_printBin(value, ' ');
     554:	60 e2       	ldi	r22, 0x20	; 32
     556:	8c 2f       	mov	r24, r28
     558:	0e 94 66 02 	call	0x4cc	; 0x4cc <sys_printBin>
    putchar(')');
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	60 91 12 02 	lds	r22, 0x0212
     568:	70 91 13 02 	lds	r23, 0x0213
     56c:	89 e2       	ldi	r24, 0x29	; 41
     56e:	90 e0       	ldi	r25, 0x00	; 0
}
     570:	cf 91       	pop	r28

void sys_printHexBin8 (uint8_t value)
{
    printf("0x%02x (", value);
    sys_printBin(value, ' ');
    putchar(')');
     572:	0c 94 ae 08 	jmp	0x115c	; 0x115c <fputc>

00000576 <sys_cmd_sinfo>:
}


int8_t sys_cmd_sinfo (uint8_t argc, char *argv[])
{
    printf("sys.flags_u8  : ");
     576:	8b e8       	ldi	r24, 0x8B	; 139
     578:	91 e0       	ldi	r25, 0x01	; 1
     57a:	9f 93       	push	r25
     57c:	8f 93       	push	r24
     57e:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <printf>
    sys_printHexBin8(sys.flags_u8);
     582:	80 91 fa 01 	lds	r24, 0x01FA
     586:	0e 94 a0 02 	call	0x540	; 0x540 <sys_printHexBin8>
    sys_newline();
     58a:	0e 94 0c 02 	call	0x418	; 0x418 <sys_newline>
    printf("sys.taskErr_u8: ");
     58e:	8c e9       	ldi	r24, 0x9C	; 156
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	9f 93       	push	r25
     594:	8f 93       	push	r24
     596:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <printf>
    sys_printHexBin8(sys.taskErr_u8);
     59a:	80 91 fb 01 	lds	r24, 0x01FB
     59e:	0e 94 a0 02 	call	0x540	; 0x540 <sys_printHexBin8>
    sys_newline();
     5a2:	0e 94 0c 02 	call	0x418	; 0x418 <sys_newline>
    return 0;
     5a6:	0f 90       	pop	r0
     5a8:	0f 90       	pop	r0
     5aa:	0f 90       	pop	r0
     5ac:	0f 90       	pop	r0
}
     5ae:	80 e0       	ldi	r24, 0x00	; 0
     5b0:	08 95       	ret

000005b2 <sys_printHexBin16>:
    putchar(')');
}


void sys_printHexBin16 (uint16_t value)
{
     5b2:	1f 93       	push	r17
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	18 2f       	mov	r17, r24
     5ba:	c9 2f       	mov	r28, r25
    printf("0x%04x (", value);
     5bc:	9f 93       	push	r25
     5be:	8f 93       	push	r24
     5c0:	2d ea       	ldi	r18, 0xAD	; 173
     5c2:	31 e0       	ldi	r19, 0x01	; 1
     5c4:	3f 93       	push	r19
     5c6:	2f 93       	push	r18
     5c8:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <printf>
    sys_printBin(value>>8, ' ');
     5cc:	60 e2       	ldi	r22, 0x20	; 32
     5ce:	8c 2f       	mov	r24, r28
     5d0:	0e 94 66 02 	call	0x4cc	; 0x4cc <sys_printBin>
    putchar(' ');
     5d4:	c2 e1       	ldi	r28, 0x12	; 18
     5d6:	d2 e0       	ldi	r29, 0x02	; 2
     5d8:	68 81       	ld	r22, Y
     5da:	79 81       	ldd	r23, Y+1	; 0x01
     5dc:	80 e2       	ldi	r24, 0x20	; 32
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	0e 94 ae 08 	call	0x115c	; 0x115c <fputc>
    sys_printBin(value & 0xff, ' ');
     5e4:	60 e2       	ldi	r22, 0x20	; 32
     5e6:	81 2f       	mov	r24, r17
     5e8:	0e 94 66 02 	call	0x4cc	; 0x4cc <sys_printBin>
    putchar(')');
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
     5f4:	68 81       	ld	r22, Y
     5f6:	79 81       	ldd	r23, Y+1	; 0x01
     5f8:	89 e2       	ldi	r24, 0x29	; 41
     5fa:	90 e0       	ldi	r25, 0x00	; 0
}
     5fc:	df 91       	pop	r29
     5fe:	cf 91       	pop	r28
     600:	1f 91       	pop	r17
{
    printf("0x%04x (", value);
    sys_printBin(value>>8, ' ');
    putchar(' ');
    sys_printBin(value & 0xff, ' ');
    putchar(')');
     602:	0c 94 ae 08 	jmp	0x115c	; 0x115c <fputc>

00000606 <sys_readArgument>:
    return 0;
}


int16_t sys_readArgument (char *str, int16_t max)
{
     606:	cf 93       	push	r28
     608:	df 93       	push	r29
     60a:	eb 01       	movw	r28, r22
    int16_t value;
    
    if (str[0]=='0' && str[1]=='x')
     60c:	fc 01       	movw	r30, r24
     60e:	20 81       	ld	r18, Z
     610:	20 33       	cpi	r18, 0x30	; 48
     612:	31 f4       	brne	.+12     	; 0x620 <sys_readArgument+0x1a>
     614:	21 81       	ldd	r18, Z+1	; 0x01
     616:	28 37       	cpi	r18, 0x78	; 120
     618:	19 f4       	brne	.+6      	; 0x620 <sys_readArgument+0x1a>
        value = strtol(str, NULL, 16);
     61a:	40 e1       	ldi	r20, 0x10	; 16
     61c:	50 e0       	ldi	r21, 0x00	; 0
     61e:	02 c0       	rjmp	.+4      	; 0x624 <sys_readArgument+0x1e>
    else
        value = strtol(str, NULL, 10);
     620:	4a e0       	ldi	r20, 0x0A	; 10
     622:	50 e0       	ldi	r21, 0x00	; 0
     624:	60 e0       	ldi	r22, 0x00	; 0
     626:	70 e0       	ldi	r23, 0x00	; 0
     628:	0e 94 19 07 	call	0xe32	; 0xe32 <strtol>
    
    if (value>max)
     62c:	c6 17       	cp	r28, r22
     62e:	d7 07       	cpc	r29, r23
     630:	1c f4       	brge	.+6      	; 0x638 <sys_readArgument+0x32>
        return -1;
     632:	8f ef       	ldi	r24, 0xFF	; 255
     634:	9f ef       	ldi	r25, 0xFF	; 255
     636:	01 c0       	rjmp	.+2      	; 0x63a <sys_readArgument+0x34>
     638:	cb 01       	movw	r24, r22
    
    return value;
}
     63a:	df 91       	pop	r29
     63c:	cf 91       	pop	r28
     63e:	08 95       	ret

00000640 <sys_uart_available>:
}


uint8_t sys_uart_available (void)
{
    return sys.uart.wpos_u8 >= sys.uart.rpos_u8
     640:	90 91 fe 01 	lds	r25, 0x01FE
     644:	80 91 fd 01 	lds	r24, 0x01FD
     648:	98 17       	cp	r25, r24
     64a:	28 f0       	brcs	.+10     	; 0x656 <sys_uart_available+0x16>
    ? sys.uart.wpos_u8 - sys.uart.rpos_u8
     64c:	80 91 fe 01 	lds	r24, 0x01FE
     650:	90 91 fd 01 	lds	r25, 0x01FD
     654:	05 c0       	rjmp	.+10     	; 0x660 <sys_uart_available+0x20>
    : ((int16_t)sys.uart.wpos_u8) + GLOBAL_UART_RECBUFSIZE - sys.uart.rpos_u8;
     656:	80 91 fe 01 	lds	r24, 0x01FE
     65a:	90 91 fd 01 	lds	r25, 0x01FD
}


uint8_t sys_uart_available (void)
{
    return sys.uart.wpos_u8 >= sys.uart.rpos_u8
     65e:	80 5f       	subi	r24, 0xF0	; 240
     660:	89 1b       	sub	r24, r25
    ? sys.uart.wpos_u8 - sys.uart.rpos_u8
    : ((int16_t)sys.uart.wpos_u8) + GLOBAL_UART_RECBUFSIZE - sys.uart.rpos_u8;
}
     662:	08 95       	ret

00000664 <sys_uart_getBufferByte>:


//----------------------------------------------------------------------------

int16_t sys_uart_getBufferByte (uint8_t pos)
{
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
     668:	c8 2f       	mov	r28, r24
    int16_t value;
    sys_cli();
     66a:	0e 94 03 02 	call	0x406	; 0x406 <sys_cli>
    
    if (pos >= sys_uart_available())
     66e:	0e 94 20 03 	call	0x640	; 0x640 <sys_uart_available>
     672:	c8 17       	cp	r28, r24
     674:	60 f4       	brcc	.+24     	; 0x68e <sys_uart_getBufferByte+0x2a>
        value = -1;
    else
    {
        uint8_t bufpos = sys.uart.rpos_u8 + pos;
     676:	e0 91 fd 01 	lds	r30, 0x01FD
     67a:	ec 0f       	add	r30, r28
        if (bufpos >= GLOBAL_UART_RECBUFSIZE)
     67c:	e0 31       	cpi	r30, 0x10	; 16
     67e:	08 f0       	brcs	.+2      	; 0x682 <sys_uart_getBufferByte+0x1e>
            bufpos -= GLOBAL_UART_RECBUFSIZE;
     680:	e0 51       	subi	r30, 0x10	; 16
        value = sys.uart.rbuffer_u8[bufpos];
     682:	f0 e0       	ldi	r31, 0x00	; 0
     684:	e6 50       	subi	r30, 0x06	; 6
     686:	fe 4f       	sbci	r31, 0xFE	; 254
     688:	c6 81       	ldd	r28, Z+6	; 0x06
     68a:	d0 e0       	ldi	r29, 0x00	; 0
     68c:	02 c0       	rjmp	.+4      	; 0x692 <sys_uart_getBufferByte+0x2e>
{
    int16_t value;
    sys_cli();
    
    if (pos >= sys_uart_available())
        value = -1;
     68e:	cf ef       	ldi	r28, 0xFF	; 255
     690:	df ef       	ldi	r29, 0xFF	; 255
        if (bufpos >= GLOBAL_UART_RECBUFSIZE)
            bufpos -= GLOBAL_UART_RECBUFSIZE;
        value = sys.uart.rbuffer_u8[bufpos];
    }
    
    sys_sei();
     692:	0e 94 fd 01 	call	0x3fa	; 0x3fa <sys_sei>
    return value;
}
     696:	ce 01       	movw	r24, r28
     698:	df 91       	pop	r29
     69a:	cf 91       	pop	r28
     69c:	08 95       	ret

0000069e <sys_uart_flush>:


void sys_uart_flush (void)
{
    sys_cli();
     69e:	0e 94 03 02 	call	0x406	; 0x406 <sys_cli>
    while (SYS_UART_BYTE_RECEIVED)
     6a2:	80 91 c0 00 	lds	r24, 0x00C0
     6a6:	87 ff       	sbrs	r24, 7
     6a8:	05 c0       	rjmp	.+10     	; 0x6b4 <sys_uart_flush+0x16>
        sys.uart.rbuffer_u8[0] = SYS_UDR;
     6aa:	80 91 c6 00 	lds	r24, 0x00C6
     6ae:	80 93 00 02 	sts	0x0200, r24
     6b2:	f7 cf       	rjmp	.-18     	; 0x6a2 <sys_uart_flush+0x4>
    
    sys.uart.rpos_u8 = 0;
     6b4:	10 92 fd 01 	sts	0x01FD, r1
    sys.uart.wpos_u8 = 0;
     6b8:	10 92 fe 01 	sts	0x01FE, r1
    sys.uart.errcnt_u8 = 0;
     6bc:	10 92 ff 01 	sts	0x01FF, r1
    sys_sei();
     6c0:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <sys_sei>

000006c4 <sys_setEvent>:
//****************************************************************************
// Event Handling
//****************************************************************************

Sys_Event sys_setEvent (Sys_Event event)
{
     6c4:	cf 93       	push	r28
     6c6:	df 93       	push	r29
     6c8:	c8 2f       	mov	r28, r24
    uint8_t eventIsPending = 0;
    sys_cli();
     6ca:	0e 94 03 02 	call	0x406	; 0x406 <sys_cli>
    if (sys.eventFlag & event)
     6ce:	d0 91 fc 01 	lds	r29, 0x01FC
        eventIsPending = 1;
    sys.eventFlag |= event;
     6d2:	90 91 fc 01 	lds	r25, 0x01FC
     6d6:	9c 2b       	or	r25, r28
     6d8:	90 93 fc 01 	sts	0x01FC, r25
    sys_sei();
     6dc:	0e 94 fd 01 	call	0x3fa	; 0x3fa <sys_sei>

Sys_Event sys_setEvent (Sys_Event event)
{
    uint8_t eventIsPending = 0;
    sys_cli();
    if (sys.eventFlag & event)
     6e0:	cd 23       	and	r28, r29
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	09 f4       	brne	.+2      	; 0x6e8 <sys_setEvent+0x24>
     6e6:	80 e0       	ldi	r24, 0x00	; 0
        eventIsPending = 1;
    sys.eventFlag |= event;
    sys_sei();
    
    return eventIsPending;
}
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	08 95       	ret

000006ee <sys_clearEvent>:


Sys_Event sys_clearEvent (Sys_Event event)
{
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	c8 2f       	mov	r28, r24
    uint8_t eventIsPending = 0;
    sys_cli();
     6f4:	0e 94 03 02 	call	0x406	; 0x406 <sys_cli>
    if (sys.eventFlag & event)
     6f8:	d0 91 fc 01 	lds	r29, 0x01FC
        eventIsPending = 1;
    sys.eventFlag &= ~event;
     6fc:	80 91 fc 01 	lds	r24, 0x01FC
     700:	9c 2f       	mov	r25, r28
     702:	90 95       	com	r25
     704:	98 23       	and	r25, r24
     706:	90 93 fc 01 	sts	0x01FC, r25
    sys_sei();
     70a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <sys_sei>

Sys_Event sys_clearEvent (Sys_Event event)
{
    uint8_t eventIsPending = 0;
    sys_cli();
    if (sys.eventFlag & event)
     70e:	cd 23       	and	r28, r29
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	09 f4       	brne	.+2      	; 0x716 <sys_clearEvent+0x28>
     714:	80 e0       	ldi	r24, 0x00	; 0
        eventIsPending = 1;
    sys.eventFlag &= ~event;
    sys_sei();
    
    return eventIsPending;
}
     716:	df 91       	pop	r29
     718:	cf 91       	pop	r28
     71a:	08 95       	ret

0000071c <sys_isEventPending>:


Sys_Event sys_isEventPending (Sys_Event event)
{
    return (sys.eventFlag & event) != 0;
     71c:	90 91 fc 01 	lds	r25, 0x01FC
     720:	98 23       	and	r25, r24
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	09 f4       	brne	.+2      	; 0x728 <sys_isEventPending+0xc>
     726:	80 e0       	ldi	r24, 0x00	; 0
}
     728:	08 95       	ret

0000072a <sys_setLed>:

#ifdef ARDUINO

void sys_setLed (uint8_t ledState)
{
    if (ledState)
     72a:	88 23       	and	r24, r24
     72c:	11 f0       	breq	.+4      	; 0x732 <sys_setLed+0x8>
        PORTB |= (1<<PB5);
     72e:	2d 9a       	sbi	0x05, 5	; 5
     730:	08 95       	ret
    else
        PORTB &= ~(1<<PB5);
     732:	2d 98       	cbi	0x05, 5	; 5
     734:	08 95       	ret

00000736 <sys_toggleLed>:
}

void sys_toggleLed (void)
{
    PORTB ^= (1<<PB5);
     736:	85 b1       	in	r24, 0x05	; 5
     738:	90 e2       	ldi	r25, 0x20	; 32
     73a:	89 27       	eor	r24, r25
     73c:	85 b9       	out	0x05, r24	; 5
     73e:	08 95       	ret

00000740 <sys_getMonCmdInfo>:
//****************************************************************************
// Monitor Handling
//****************************************************************************

struct Sys_MonCmdInfo sys_getMonCmdInfo (uint8_t index)
{
     740:	1f 93       	push	r17
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
     746:	00 d0       	rcall	.+0      	; 0x748 <sys_getMonCmdInfo+0x8>
     748:	00 d0       	rcall	.+0      	; 0x74a <sys_getMonCmdInfo+0xa>
     74a:	cd b7       	in	r28, 0x3d	; 61
     74c:	de b7       	in	r29, 0x3e	; 62
    struct Sys_MonCmdInfo ci = { NULL, NULL} ;
     74e:	1a 82       	std	Y+2, r1	; 0x02
     750:	19 82       	std	Y+1, r1	; 0x01
     752:	1c 82       	std	Y+4, r1	; 0x04
     754:	1b 82       	std	Y+3, r1	; 0x03
    PGM_P p;
    
    if (index < sizeof(SYS_PMEMSTR_CMDS)/sizeof(struct Sys_MonCmdInfo))
     756:	82 30       	cpi	r24, 0x02	; 2
     758:	38 f4       	brcc	.+14     	; 0x768 <sys_getMonCmdInfo+0x28>
        p = (PGM_P)&(SYS_PMEMSTR_CMDS[index]);
     75a:	94 e0       	ldi	r25, 0x04	; 4
     75c:	89 9f       	mul	r24, r25
     75e:	b0 01       	movw	r22, r0
     760:	11 24       	eor	r1, r1
     762:	66 50       	subi	r22, 0x06	; 6
     764:	7f 4f       	sbci	r23, 0xFF	; 255
     766:	0c c0       	rjmp	.+24     	; 0x780 <sys_getMonCmdInfo+0x40>
        else
        {
            index -= sizeof(SYS_PMEMSTR_CMDS)/sizeof(struct Sys_MonCmdInfo);
     768:	1e ef       	ldi	r17, 0xFE	; 254
     76a:	18 0f       	add	r17, r24
            if (index >= mon_getCmdCount())
     76c:	0e 94 31 01 	call	0x262	; 0x262 <mon_getCmdCount>
     770:	18 17       	cp	r17, r24
     772:	60 f4       	brcc	.+24     	; 0x78c <sys_getMonCmdInfo+0x4c>
                return ci;
            p = (PGM_P)&(MON_PMEMSTR_CMDS[index]);
     774:	84 e0       	ldi	r24, 0x04	; 4
     776:	18 9f       	mul	r17, r24
     778:	b0 01       	movw	r22, r0
     77a:	11 24       	eor	r1, r1
     77c:	64 57       	subi	r22, 0x74	; 116
     77e:	7f 4f       	sbci	r23, 0xFF	; 255
        }
    
    memcpy_P(&ci, p, sizeof(struct Sys_MonCmdInfo));
     780:	44 e0       	ldi	r20, 0x04	; 4
     782:	50 e0       	ldi	r21, 0x00	; 0
     784:	ce 01       	movw	r24, r28
     786:	01 96       	adiw	r24, 0x01	; 1
     788:	0e 94 55 08 	call	0x10aa	; 0x10aa <memcpy_P>
    return ci;
     78c:	69 81       	ldd	r22, Y+1	; 0x01
     78e:	7a 81       	ldd	r23, Y+2	; 0x02
     790:	8b 81       	ldd	r24, Y+3	; 0x03
     792:	9c 81       	ldd	r25, Y+4	; 0x04
}
     794:	0f 90       	pop	r0
     796:	0f 90       	pop	r0
     798:	0f 90       	pop	r0
     79a:	0f 90       	pop	r0
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	1f 91       	pop	r17
     7a2:	08 95       	ret

000007a4 <sys_cmd_help>:
//****************************************************************************
// Monitor Commands
//****************************************************************************

int8_t sys_cmd_help (uint8_t argc, char *argv[])
{
     7a4:	8f 92       	push	r8
     7a6:	9f 92       	push	r9
     7a8:	af 92       	push	r10
     7aa:	bf 92       	push	r11
     7ac:	cf 92       	push	r12
     7ae:	df 92       	push	r13
     7b0:	ef 92       	push	r14
     7b2:	ff 92       	push	r15
     7b4:	0f 93       	push	r16
     7b6:	1f 93       	push	r17
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
    // struct Sys_Monitor *pmon = (struct Sys_Monitor *)&sys_mon;
    uint8_t i, j, max;
    
    i = 0; max = 0;
     7bc:	c0 e0       	ldi	r28, 0x00	; 0
     7be:	80 e0       	ldi	r24, 0x00	; 0
    while (1)
    {
        struct Sys_MonCmdInfo ci = sys_getMonCmdInfo(i++);
     7c0:	d1 e0       	ldi	r29, 0x01	; 1
     7c2:	d8 0f       	add	r29, r24
     7c4:	0e 94 a0 03 	call	0x740	; 0x740 <sys_getMonCmdInfo>
        if (ci.pFunction == NULL)
     7c8:	89 2b       	or	r24, r25
     7ca:	41 f0       	breq	.+16     	; 0x7dc <sys_cmd_help+0x38>


__attribute__((__always_inline__)) static inline size_t strlen_P(const char * s);
static inline size_t strlen_P(const char *s) {
  return __builtin_constant_p(__builtin_strlen(s))
     ? __builtin_strlen(s) : __strlen_P(s);
     7cc:	cb 01       	movw	r24, r22
     7ce:	0e 94 67 08 	call	0x10ce	; 0x10ce <__strlen_P>
            break;
        uint8_t len = strlen_P(ci.pInfo);
        max = (len>max) ? len : max;
     7d2:	c8 17       	cp	r28, r24
     7d4:	08 f4       	brcc	.+2      	; 0x7d8 <sys_cmd_help+0x34>
     7d6:	c8 2f       	mov	r28, r24
    uint8_t i, j, max;
    
    i = 0; max = 0;
    while (1)
    {
        struct Sys_MonCmdInfo ci = sys_getMonCmdInfo(i++);
     7d8:	8d 2f       	mov	r24, r29
        if (ci.pFunction == NULL)
            break;
        uint8_t len = strlen_P(ci.pInfo);
        max = (len>max) ? len : max;
    }
     7da:	f2 cf       	rjmp	.-28     	; 0x7c0 <sys_cmd_help+0x1c>
    
    i = 0;
     7dc:	80 e0       	ldi	r24, 0x00	; 0
        struct Sys_MonCmdInfo ci = sys_getMonCmdInfo(i++);
        if (ci.pFunction == NULL)
            break;
        
        sys_printString_P(ci.pInfo);
        for (j=strlen_P(ci.pInfo); j<max+2; j++)
     7de:	d0 e0       	ldi	r29, 0x00	; 0
     7e0:	21 96       	adiw	r28, 0x01	; 1
    }
    
    i = 0;
    while (1)
    {
        struct Sys_MonCmdInfo ci = sys_getMonCmdInfo(i++);
     7e2:	99 24       	eor	r9, r9
     7e4:	93 94       	inc	r9
     7e6:	98 0e       	add	r9, r24
     7e8:	0e 94 a0 03 	call	0x740	; 0x740 <sys_getMonCmdInfo>
     7ec:	6b 01       	movw	r12, r22
     7ee:	7c 01       	movw	r14, r24
        if (ci.pFunction == NULL)
     7f0:	ef 28       	or	r14, r15
     7f2:	19 f1       	breq	.+70     	; 0x83a <sys_cmd_help+0x96>
            break;
        
        sys_printString_P(ci.pInfo);
     7f4:	cb 01       	movw	r24, r22
     7f6:	0e 94 15 02 	call	0x42a	; 0x42a <sys_printString_P>
     7fa:	c6 01       	movw	r24, r12
     7fc:	0e 94 67 08 	call	0x10ce	; 0x10ce <__strlen_P>
     800:	5c 01       	movw	r10, r24
        for (j=strlen_P(ci.pInfo); j<max+2; j++)
     802:	88 2e       	mov	r8, r24
     804:	00 e0       	ldi	r16, 0x00	; 0
     806:	10 e0       	ldi	r17, 0x00	; 0
     808:	88 2d       	mov	r24, r8
     80a:	80 0f       	add	r24, r16
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	0f 5f       	subi	r16, 0xFF	; 255
     810:	1f 4f       	sbci	r17, 0xFF	; 255
     812:	c8 17       	cp	r28, r24
     814:	d9 07       	cpc	r29, r25
     816:	4c f0       	brlt	.+18     	; 0x82a <sys_cmd_help+0x86>
            putchar(' ');
     818:	60 91 12 02 	lds	r22, 0x0212
     81c:	70 91 13 02 	lds	r23, 0x0213
     820:	80 e2       	ldi	r24, 0x20	; 32
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	0e 94 ae 08 	call	0x115c	; 0x115c <fputc>
     828:	ef cf       	rjmp	.-34     	; 0x808 <sys_cmd_help+0x64>
        sys_puts_P(ci.pInfo + strlen_P(ci.pInfo) + 1);
     82a:	c5 01       	movw	r24, r10
     82c:	01 96       	adiw	r24, 0x01	; 1
     82e:	8c 0d       	add	r24, r12
     830:	9d 1d       	adc	r25, r13
     832:	0e 94 38 02 	call	0x470	; 0x470 <sys_puts_P>
    }
    
    i = 0;
    while (1)
    {
        struct Sys_MonCmdInfo ci = sys_getMonCmdInfo(i++);
     836:	89 2d       	mov	r24, r9
        
        sys_printString_P(ci.pInfo);
        for (j=strlen_P(ci.pInfo); j<max+2; j++)
            putchar(' ');
        sys_puts_P(ci.pInfo + strlen_P(ci.pInfo) + 1);
    }
     838:	d4 cf       	rjmp	.-88     	; 0x7e2 <sys_cmd_help+0x3e>
    
    return 0;
}
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	df 91       	pop	r29
     83e:	cf 91       	pop	r28
     840:	1f 91       	pop	r17
     842:	0f 91       	pop	r16
     844:	ff 90       	pop	r15
     846:	ef 90       	pop	r14
     848:	df 90       	pop	r13
     84a:	cf 90       	pop	r12
     84c:	bf 90       	pop	r11
     84e:	af 90       	pop	r10
     850:	9f 90       	pop	r9
     852:	8f 90       	pop	r8
     854:	08 95       	ret

00000856 <sys_mon_printUsageInfo>:
    return ci;
}


void sys_mon_printUsageInfo (struct Sys_MonCmdInfo *pCmdInfo)
{
     856:	ef 92       	push	r14
     858:	ff 92       	push	r15
     85a:	0f 93       	push	r16
     85c:	1f 93       	push	r17
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	1f 92       	push	r1
     864:	cd b7       	in	r28, 0x3d	; 61
     866:	de b7       	in	r29, 0x3e	; 62
    PGM_P p = pCmdInfo->pInfo;
     868:	fc 01       	movw	r30, r24
     86a:	60 81       	ld	r22, Z
     86c:	71 81       	ldd	r23, Z+1	; 0x01
    for (i=0; i<2; i++)
    {
        char c;
        do
        {
            memcpy_P(&c, p++, 1);
     86e:	8b 01       	movw	r16, r22
     870:	0f 5f       	subi	r16, 0xFF	; 255
     872:	1f 4f       	sbci	r17, 0xFF	; 255
     874:	41 e0       	ldi	r20, 0x01	; 1
     876:	50 e0       	ldi	r21, 0x00	; 0
     878:	ce 01       	movw	r24, r28
     87a:	01 96       	adiw	r24, 0x01	; 1
     87c:	0e 94 55 08 	call	0x10aa	; 0x10aa <memcpy_P>
        }
        while (c != 0);
     880:	89 81       	ldd	r24, Y+1	; 0x01
     882:	88 23       	and	r24, r24
     884:	11 f0       	breq	.+4      	; 0x88a <sys_mon_printUsageInfo+0x34>
    for (i=0; i<2; i++)
    {
        char c;
        do
        {
            memcpy_P(&c, p++, 1);
     886:	b8 01       	movw	r22, r16
     888:	f2 cf       	rjmp	.-28     	; 0x86e <sys_mon_printUsageInfo+0x18>
     88a:	78 01       	movw	r14, r16
     88c:	ff ef       	ldi	r31, 0xFF	; 255
     88e:	ef 1a       	sub	r14, r31
     890:	ff 0a       	sbc	r15, r31
     892:	41 e0       	ldi	r20, 0x01	; 1
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	b8 01       	movw	r22, r16
     898:	ce 01       	movw	r24, r28
     89a:	01 96       	adiw	r24, 0x01	; 1
     89c:	0e 94 55 08 	call	0x10aa	; 0x10aa <memcpy_P>
        }
        while (c != 0);
     8a0:	89 81       	ldd	r24, Y+1	; 0x01
     8a2:	88 23       	and	r24, r24
     8a4:	11 f0       	breq	.+4      	; 0x8aa <sys_mon_printUsageInfo+0x54>
    for (i=0; i<2; i++)
    {
        char c;
        do
        {
            memcpy_P(&c, p++, 1);
     8a6:	87 01       	movw	r16, r14
     8a8:	f0 cf       	rjmp	.-32     	; 0x88a <sys_mon_printUsageInfo+0x34>
        }
        while (c != 0);
    }
    sys_printString_P(p);
     8aa:	c7 01       	movw	r24, r14
     8ac:	0e 94 15 02 	call	0x42a	; 0x42a <sys_printString_P>
}
     8b0:	0f 90       	pop	r0
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	1f 91       	pop	r17
     8b8:	0f 91       	pop	r16
     8ba:	ff 90       	pop	r15
     8bc:	ef 90       	pop	r14
     8be:	08 95       	ret

000008c0 <sys_mon_ExecuteCmd>:


void sys_mon_ExecuteCmd (void)
{
     8c0:	cf 92       	push	r12
     8c2:	df 92       	push	r13
     8c4:	ef 92       	push	r14
     8c6:	ff 92       	push	r15
     8c8:	0f 93       	push	r16
     8ca:	1f 93       	push	r17
     8cc:	cf 93       	push	r28
     8ce:	df 93       	push	r29
     8d0:	cd b7       	in	r28, 0x3d	; 61
     8d2:	de b7       	in	r29, 0x3e	; 62
     8d4:	2c 97       	sbiw	r28, 0x0c	; 12
     8d6:	0f b6       	in	r0, 0x3f	; 63
     8d8:	f8 94       	cli
     8da:	de bf       	out	0x3e, r29	; 62
     8dc:	0f be       	out	0x3f, r0	; 63
     8de:	cd bf       	out	0x3d, r28	; 61
    struct Sys_Monitor *pmon = (struct Sys_Monitor *)&sys_mon;
    sys_newline();
     8e0:	0e 94 0c 02 	call	0x418	; 0x418 <sys_newline>
     8e4:	9e 01       	movw	r18, r28
     8e6:	2f 5f       	subi	r18, 0xFF	; 255
     8e8:	3f 4f       	sbci	r19, 0xFF	; 255
    
    uint8_t i;
    char *argv[GLOBAL_MON_MAXARGV];
    uint8_t argc;
    
    char *ps = pmon->cmdLine;
     8ea:	e2 ed       	ldi	r30, 0xD2	; 210
     8ec:	f1 e0       	ldi	r31, 0x01	; 1
    argc = 0;
     8ee:	d1 2c       	mov	r13, r1
     8f0:	12 2f       	mov	r17, r18
     8f2:	03 2f       	mov	r16, r19
    
    i = 0;
    for (i=0; i<GLOBAL_MON_MAXARGV && *ps; i++)
     8f4:	80 81       	ld	r24, Z
     8f6:	88 23       	and	r24, r24
     8f8:	a9 f0       	breq	.+42     	; 0x924 <__stack+0x25>
     8fa:	df 01       	movw	r26, r30
    {
        while(*ps==' ') ps++; // ignore leading spaces
     8fc:	81 91       	ld	r24, Z+
     8fe:	80 32       	cpi	r24, 0x20	; 32
     900:	e1 f3       	breq	.-8      	; 0x8fa <sys_mon_ExecuteCmd+0x3a>
        if (*ps == 0) break;
     902:	88 23       	and	r24, r24
     904:	79 f0       	breq	.+30     	; 0x924 <__stack+0x25>
        argv[i] = ps;
     906:	f9 01       	movw	r30, r18
     908:	a1 93       	st	Z+, r26
     90a:	b1 93       	st	Z+, r27
     90c:	9f 01       	movw	r18, r30
        argc++;
     90e:	d3 94       	inc	r13
     910:	fd 01       	movw	r30, r26
        while (*ps != ' ' && *ps)
     912:	8d 91       	ld	r24, X+
     914:	80 32       	cpi	r24, 0x20	; 32
     916:	09 f4       	brne	.+2      	; 0x91a <__stack+0x1b>
     918:	84 c0       	rjmp	.+264    	; 0xa22 <__stack+0x123>
     91a:	81 11       	cpse	r24, r1
     91c:	f9 cf       	rjmp	.-14     	; 0x910 <__stack+0x11>
    
    char *ps = pmon->cmdLine;
    argc = 0;
    
    i = 0;
    for (i=0; i<GLOBAL_MON_MAXARGV && *ps; i++)
     91e:	84 e0       	ldi	r24, 0x04	; 4
     920:	d8 12       	cpse	r13, r24
     922:	e8 cf       	rjmp	.-48     	; 0x8f4 <sys_mon_ExecuteCmd+0x34>
    uint8_t i;
    char *argv[GLOBAL_MON_MAXARGV];
    uint8_t argc;
    
    char *ps = pmon->cmdLine;
    argc = 0;
     924:	8d 2d       	mov	r24, r13
        while (*ps != ' ' && *ps)
            ps++;
        if (*ps==' ')
            *ps++ = 0;
    }
    for (;i<GLOBAL_MON_MAXARGV; i++)
     926:	84 30       	cpi	r24, 0x04	; 4
     928:	50 f4       	brcc	.+20     	; 0x93e <__stack+0x3f>
        argv[i] = NULL;
     92a:	e1 2f       	mov	r30, r17
     92c:	f0 2f       	mov	r31, r16
     92e:	e8 0f       	add	r30, r24
     930:	f1 1d       	adc	r31, r1
     932:	e8 0f       	add	r30, r24
     934:	f1 1d       	adc	r31, r1
     936:	11 82       	std	Z+1, r1	; 0x01
     938:	10 82       	st	Z, r1
        while (*ps != ' ' && *ps)
            ps++;
        if (*ps==' ')
            *ps++ = 0;
    }
    for (;i<GLOBAL_MON_MAXARGV; i++)
     93a:	8f 5f       	subi	r24, 0xFF	; 255
     93c:	f4 cf       	rjmp	.-24     	; 0x926 <__stack+0x27>
     printf(" len=%d cmd='%s'", strlen(argv[i]), argv[i]);
     sys_newline();
     }
     */
    
    if (argc>0 && *argv[0])
     93e:	dd 20       	and	r13, r13
     940:	09 f4       	brne	.+2      	; 0x944 <__stack+0x45>
     942:	58 c0       	rjmp	.+176    	; 0x9f4 <__stack+0xf5>
     944:	e9 81       	ldd	r30, Y+1	; 0x01
     946:	fa 81       	ldd	r31, Y+2	; 0x02
     948:	80 81       	ld	r24, Z
     94a:	88 23       	and	r24, r24
     94c:	09 f4       	brne	.+2      	; 0x950 <__stack+0x51>
     94e:	52 c0       	rjmp	.+164    	; 0x9f4 <__stack+0xf5>
     950:	80 e0       	ldi	r24, 0x00	; 0
    {
        i = 0;
        while (1)
        {
            struct Sys_MonCmdInfo ci = sys_getMonCmdInfo(i++);
     952:	cc 24       	eor	r12, r12
     954:	c3 94       	inc	r12
     956:	c8 0e       	add	r12, r24
     958:	0e 94 a0 03 	call	0x740	; 0x740 <sys_getMonCmdInfo>
     95c:	69 87       	std	Y+9, r22	; 0x09
     95e:	7a 87       	std	Y+10, r23	; 0x0a
     960:	8b 87       	std	Y+11, r24	; 0x0b
     962:	9c 87       	std	Y+12, r25	; 0x0c
            if (ci.pFunction == NULL)
     964:	eb 84       	ldd	r14, Y+11	; 0x0b
     966:	fc 84       	ldd	r15, Y+12	; 0x0c
     968:	e1 14       	cp	r14, r1
     96a:	f1 04       	cpc	r15, r1
     96c:	29 f4       	brne	.+10     	; 0x978 <__stack+0x79>
            {
                sys_printString_P(SYS_PMEM_ERR1);
     96e:	89 e5       	ldi	r24, 0x59	; 89
     970:	91 e0       	ldi	r25, 0x01	; 1
     972:	0e 94 15 02 	call	0x42a	; 0x42a <sys_printString_P>
                break;
     976:	3e c0       	rjmp	.+124    	; 0x9f4 <__stack+0xf5>
            }
            else if (strcmp_P(pmon->cmdLine, ci.pInfo)==0)
     978:	69 85       	ldd	r22, Y+9	; 0x09
     97a:	7a 85       	ldd	r23, Y+10	; 0x0a
     97c:	82 ed       	ldi	r24, 0xD2	; 210
     97e:	91 e0       	ldi	r25, 0x01	; 1
     980:	0e 94 5e 08 	call	0x10bc	; 0x10bc <strcmp_P>
     984:	89 2b       	or	r24, r25
     986:	a1 f5       	brne	.+104    	; 0x9f0 <__stack+0xf1>
            {
                if (argc==2 && strcmp_P(argv[1], SYS_PMEM_CMD_HELP)==0)
     988:	e2 e0       	ldi	r30, 0x02	; 2
     98a:	de 12       	cpse	r13, r30
     98c:	08 c0       	rjmp	.+16     	; 0x99e <__stack+0x9f>
     98e:	60 e2       	ldi	r22, 0x20	; 32
     990:	71 e0       	ldi	r23, 0x01	; 1
     992:	8b 81       	ldd	r24, Y+3	; 0x03
     994:	9c 81       	ldd	r25, Y+4	; 0x04
     996:	0e 94 5e 08 	call	0x10bc	; 0x10bc <strcmp_P>
     99a:	89 2b       	or	r24, r25
     99c:	11 f1       	breq	.+68     	; 0x9e2 <__stack+0xe3>
                    sys_mon_printUsageInfo(&ci);
                else
                {
                    int8_t retCode = (*ci.pFunction)(argc, argv);
     99e:	61 2f       	mov	r22, r17
     9a0:	70 2f       	mov	r23, r16
     9a2:	8d 2d       	mov	r24, r13
     9a4:	f7 01       	movw	r30, r14
     9a6:	09 95       	icall
     9a8:	18 2f       	mov	r17, r24
                    if (retCode)
     9aa:	88 23       	and	r24, r24
     9ac:	f1 f0       	breq	.+60     	; 0x9ea <__stack+0xeb>
                    {
                        sys_printString_P(SYS_PMEM_ERR0);
     9ae:	82 e7       	ldi	r24, 0x72	; 114
     9b0:	91 e0       	ldi	r25, 0x01	; 1
     9b2:	0e 94 15 02 	call	0x42a	; 0x42a <sys_printString_P>
                        printf("%d", retCode);
     9b6:	21 2f       	mov	r18, r17
     9b8:	33 27       	eor	r19, r19
     9ba:	27 fd       	sbrc	r18, 7
     9bc:	30 95       	com	r19
     9be:	3f 93       	push	r19
     9c0:	1f 93       	push	r17
     9c2:	26 eb       	ldi	r18, 0xB6	; 182
     9c4:	31 e0       	ldi	r19, 0x01	; 1
     9c6:	3f 93       	push	r19
     9c8:	2f 93       	push	r18
     9ca:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <printf>
                        if (retCode<0)
     9ce:	0f 90       	pop	r0
     9d0:	0f 90       	pop	r0
     9d2:	0f 90       	pop	r0
     9d4:	0f 90       	pop	r0
     9d6:	17 ff       	sbrs	r17, 7
     9d8:	08 c0       	rjmp	.+16     	; 0x9ea <__stack+0xeb>
                        {
                            sys_printString_P(SYS_PMEM_ERR2);
     9da:	8f e3       	ldi	r24, 0x3F	; 63
     9dc:	91 e0       	ldi	r25, 0x01	; 1
     9de:	0e 94 15 02 	call	0x42a	; 0x42a <sys_printString_P>
                            sys_mon_printUsageInfo(&ci);
     9e2:	ce 01       	movw	r24, r28
     9e4:	09 96       	adiw	r24, 0x09	; 9
     9e6:	0e 94 2b 04 	call	0x856	; 0x856 <sys_mon_printUsageInfo>
                        }
                    }
                }
                sys_newline();
     9ea:	0e 94 0c 02 	call	0x418	; 0x418 <sys_newline>
                break;
     9ee:	02 c0       	rjmp	.+4      	; 0x9f4 <__stack+0xf5>
    if (argc>0 && *argv[0])
    {
        i = 0;
        while (1)
        {
            struct Sys_MonCmdInfo ci = sys_getMonCmdInfo(i++);
     9f0:	8c 2d       	mov	r24, r12
                    }
                }
                sys_newline();
                break;
            }
        }
     9f2:	af cf       	rjmp	.-162    	; 0x952 <__stack+0x53>
    }
    
    sys_printString_P(SYS_PMEM_LINESTART);
     9f4:	89 e7       	ldi	r24, 0x79	; 121
     9f6:	91 e0       	ldi	r25, 0x01	; 1
     9f8:	0e 94 15 02 	call	0x42a	; 0x42a <sys_printString_P>
    pmon->cursorPos = 0;
     9fc:	10 92 d1 01 	sts	0x01D1, r1
    pmon->cmdLine[0] = 0;
     a00:	10 92 d2 01 	sts	0x01D2, r1
}
     a04:	2c 96       	adiw	r28, 0x0c	; 12
     a06:	0f b6       	in	r0, 0x3f	; 63
     a08:	f8 94       	cli
     a0a:	de bf       	out	0x3e, r29	; 62
     a0c:	0f be       	out	0x3f, r0	; 63
     a0e:	cd bf       	out	0x3d, r28	; 61
     a10:	df 91       	pop	r29
     a12:	cf 91       	pop	r28
     a14:	1f 91       	pop	r17
     a16:	0f 91       	pop	r16
     a18:	ff 90       	pop	r15
     a1a:	ef 90       	pop	r14
     a1c:	df 90       	pop	r13
     a1e:	cf 90       	pop	r12
     a20:	08 95       	ret
        argv[i] = ps;
        argc++;
        while (*ps != ' ' && *ps)
            ps++;
        if (*ps==' ')
            *ps++ = 0;
     a22:	10 82       	st	Z, r1
     a24:	fd 01       	movw	r30, r26
     a26:	7b cf       	rjmp	.-266    	; 0x91e <__stack+0x1f>

00000a28 <sys_mon_CmdLineBack>:


void sys_mon_CmdLineBack (void)
{
    struct Sys_Monitor *pmon = (struct Sys_Monitor *)&sys_mon;
    if (pmon->cursorPos==0) return;
     a28:	80 91 d1 01 	lds	r24, 0x01D1
     a2c:	88 23       	and	r24, r24
     a2e:	89 f0       	breq	.+34     	; 0xa52 <sys_mon_CmdLineBack+0x2a>
    printf("\b \b");
     a30:	89 eb       	ldi	r24, 0xB9	; 185
     a32:	91 e0       	ldi	r25, 0x01	; 1
     a34:	9f 93       	push	r25
     a36:	8f 93       	push	r24
     a38:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <printf>
    pmon->cmdLine[--pmon->cursorPos] = 0;
     a3c:	e0 91 d1 01 	lds	r30, 0x01D1
     a40:	e1 50       	subi	r30, 0x01	; 1
     a42:	e0 93 d1 01 	sts	0x01D1, r30
     a46:	f0 e0       	ldi	r31, 0x00	; 0
     a48:	e1 53       	subi	r30, 0x31	; 49
     a4a:	fe 4f       	sbci	r31, 0xFE	; 254
     a4c:	13 82       	std	Z+3, r1	; 0x03
     a4e:	0f 90       	pop	r0
     a50:	0f 90       	pop	r0
     a52:	08 95       	ret

00000a54 <sys_putnchar>:
}

void sys_putnchar (char c, uint8_t count)
{
     a54:	1f 93       	push	r17
     a56:	cf 93       	push	r28
     a58:	df 93       	push	r29
     a5a:	16 2f       	mov	r17, r22
    for (; count>0; count--)
        putchar(c);
     a5c:	c8 2f       	mov	r28, r24
     a5e:	d0 e0       	ldi	r29, 0x00	; 0
    pmon->cmdLine[--pmon->cursorPos] = 0;
}

void sys_putnchar (char c, uint8_t count)
{
    for (; count>0; count--)
     a60:	11 23       	and	r17, r17
     a62:	49 f0       	breq	.+18     	; 0xa76 <sys_putnchar+0x22>
        putchar(c);
     a64:	60 91 12 02 	lds	r22, 0x0212
     a68:	70 91 13 02 	lds	r23, 0x0213
     a6c:	ce 01       	movw	r24, r28
     a6e:	0e 94 ae 08 	call	0x115c	; 0x115c <fputc>
    pmon->cmdLine[--pmon->cursorPos] = 0;
}

void sys_putnchar (char c, uint8_t count)
{
    for (; count>0; count--)
     a72:	11 50       	subi	r17, 0x01	; 1
     a74:	f5 cf       	rjmp	.-22     	; 0xa60 <sys_putnchar+0xc>
        putchar(c);
}
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	1f 91       	pop	r17
     a7c:	08 95       	ret

00000a7e <sys_mon_main>:


void sys_mon_main (void)
{
     a7e:	1f 93       	push	r17
     a80:	cf 93       	push	r28
     a82:	df 93       	push	r29
     a84:	1f 92       	push	r1
     a86:	cd b7       	in	r28, 0x3d	; 61
     a88:	de b7       	in	r29, 0x3e	; 62
    struct Sys_Monitor *pmon = (struct Sys_Monitor *)&sys_mon;
    char c = 0;
    int8_t incLineIndex = 0;
    static uint8_t lastbyte = 0;
    
    if (sys_mon.flags & SYS_MONITOR_FLAG_LINEMODE)
     a8a:	80 91 cf 01 	lds	r24, 0x01CF
     a8e:	80 ff       	sbrs	r24, 0
     a90:	ab c0       	rjmp	.+342    	; 0xbe8 <sys_mon_main+0x16a>
     a92:	60 e0       	ldi	r22, 0x00	; 0
    {
        while (sys_uart_available()>0)
     a94:	69 83       	std	Y+1, r22	; 0x01
     a96:	0e 94 20 03 	call	0x640	; 0x640 <sys_uart_available>
     a9a:	69 81       	ldd	r22, Y+1	; 0x01
     a9c:	88 23       	and	r24, r24
     a9e:	01 f1       	breq	.+64     	; 0xae0 <sys_mon_main+0x62>
        {
            c = getchar();
     aa0:	80 91 10 02 	lds	r24, 0x0210
     aa4:	90 91 11 02 	lds	r25, 0x0211
     aa8:	0e 94 70 08 	call	0x10e0	; 0x10e0 <fgetc>
     aac:	68 2f       	mov	r22, r24
            if (lastbyte != '\n' && c == '\r')
     aae:	80 91 cc 01 	lds	r24, 0x01CC
     ab2:	8a 30       	cpi	r24, 0x0A	; 10
     ab4:	81 f0       	breq	.+32     	; 0xad6 <sys_mon_main+0x58>
     ab6:	6d 30       	cpi	r22, 0x0D	; 13
     ab8:	71 f4       	brne	.+28     	; 0xad6 <sys_mon_main+0x58>
                c = '\n';
            else
                lastbyte = c;
            if (c=='\n')
            {
                sys_mon.flags &= ~(SYS_MONITOR_FLAG_LINEMODE | SYS_MONITOR_FLAG_LINE);
     aba:	80 91 cf 01 	lds	r24, 0x01CF
     abe:	8c 7f       	andi	r24, 0xFC	; 252
     ac0:	80 93 cf 01 	sts	0x01CF, r24
                printf("\n\n\r>");
     ac4:	8d eb       	ldi	r24, 0xBD	; 189
     ac6:	91 e0       	ldi	r25, 0x01	; 1
     ac8:	9f 93       	push	r25
     aca:	8f 93       	push	r24
     acc:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <printf>
                return;
     ad0:	0f 90       	pop	r0
     ad2:	0f 90       	pop	r0
     ad4:	bb c0       	rjmp	.+374    	; 0xc4c <sys_mon_main+0x1ce>
        {
            c = getchar();
            if (lastbyte != '\n' && c == '\r')
                c = '\n';
            else
                lastbyte = c;
     ad6:	60 93 cc 01 	sts	0x01CC, r22
            if (c=='\n')
     ada:	6a 30       	cpi	r22, 0x0A	; 10
     adc:	d9 f6       	brne	.-74     	; 0xa94 <sys_mon_main+0x16>
     ade:	ed cf       	rjmp	.-38     	; 0xaba <sys_mon_main+0x3c>
                sys_mon.flags &= ~(SYS_MONITOR_FLAG_LINEMODE | SYS_MONITOR_FLAG_LINE);
                printf("\n\n\r>");
                return;
            }
        }
        if (c==SYS_MONITOR_CTRL_X)
     ae0:	68 31       	cpi	r22, 0x18	; 24
     ae2:	39 f4       	brne	.+14     	; 0xaf2 <sys_mon_main+0x74>
        {
            incLineIndex = 1;
            sys_mon.flags &= ~SYS_MONITOR_FLAG_LINE;
     ae4:	80 91 cf 01 	lds	r24, 0x01CF
     ae8:	8d 7f       	andi	r24, 0xFD	; 253
     aea:	80 93 cf 01 	sts	0x01CF, r24
                return;
            }
        }
        if (c==SYS_MONITOR_CTRL_X)
        {
            incLineIndex = 1;
     aee:	11 e0       	ldi	r17, 0x01	; 1
     af0:	19 c0       	rjmp	.+50     	; 0xb24 <sys_mon_main+0xa6>
            sys_mon.flags &= ~SYS_MONITOR_FLAG_LINE;
        }
        else if (c==SYS_MONITOR_CTRL_Y)
     af2:	69 31       	cpi	r22, 0x19	; 25
     af4:	39 f4       	brne	.+14     	; 0xb04 <sys_mon_main+0x86>
        {
            incLineIndex = -1;
            sys_mon.flags &= ~SYS_MONITOR_FLAG_LINE;
     af6:	80 91 cf 01 	lds	r24, 0x01CF
     afa:	8d 7f       	andi	r24, 0xFD	; 253
     afc:	80 93 cf 01 	sts	0x01CF, r24
            incLineIndex = 1;
            sys_mon.flags &= ~SYS_MONITOR_FLAG_LINE;
        }
        else if (c==SYS_MONITOR_CTRL_Y)
        {
            incLineIndex = -1;
     b00:	1f ef       	ldi	r17, 0xFF	; 255
     b02:	10 c0       	rjmp	.+32     	; 0xb24 <sys_mon_main+0xa6>
            sys_mon.flags &= ~SYS_MONITOR_FLAG_LINE;
        }
        else if (c==SYS_MONITOR_CTRL_C)
     b04:	63 30       	cpi	r22, 0x03	; 3
     b06:	69 f4       	brne	.+26     	; 0xb22 <sys_mon_main+0xa4>
        {
            if (sys_mon.flags & SYS_MONITOR_FLAG_CONT)
     b08:	80 91 cf 01 	lds	r24, 0x01CF
     b0c:	82 ff       	sbrs	r24, 2
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <sys_mon_main+0x9a>
                sys_mon.flags &= ~(SYS_MONITOR_FLAG_CONT | SYS_MONITOR_FLAG_LINE);
     b10:	80 91 cf 01 	lds	r24, 0x01CF
     b14:	89 7f       	andi	r24, 0xF9	; 249
     b16:	03 c0       	rjmp	.+6      	; 0xb1e <sys_mon_main+0xa0>
            else
                sys_mon.flags |= SYS_MONITOR_FLAG_CONT;
     b18:	80 91 cf 01 	lds	r24, 0x01CF
     b1c:	84 60       	ori	r24, 0x04	; 4
     b1e:	80 93 cf 01 	sts	0x01CF, r24

void sys_mon_main (void)
{
    struct Sys_Monitor *pmon = (struct Sys_Monitor *)&sys_mon;
    char c = 0;
    int8_t incLineIndex = 0;
     b22:	10 e0       	ldi	r17, 0x00	; 0
                sys_mon.flags &= ~(SYS_MONITOR_FLAG_CONT | SYS_MONITOR_FLAG_LINE);
            else
                sys_mon.flags |= SYS_MONITOR_FLAG_CONT;
        }
        
        if (sys_mon.flags & SYS_MONITOR_FLAG_LINE)
     b24:	80 91 cf 01 	lds	r24, 0x01CF
     b28:	81 ff       	sbrs	r24, 1
     b2a:	18 c0       	rjmp	.+48     	; 0xb5c <sys_mon_main+0xde>
        {
            int8_t lenSpaces = mon_printLine(sys_mon.lineIndex, c);
     b2c:	80 91 d0 01 	lds	r24, 0x01D0
     b30:	0e 94 51 01 	call	0x2a2	; 0x2a2 <mon_printLine>
            sys_putnchar(' ', lenSpaces);
     b34:	68 2f       	mov	r22, r24
     b36:	80 e2       	ldi	r24, 0x20	; 32
     b38:	0e 94 2a 05 	call	0xa54	; 0xa54 <sys_putnchar>
            printf("\r");
     b3c:	8d e0       	ldi	r24, 0x0D	; 13
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <putchar>
            if (sys_mon.flags & SYS_MONITOR_FLAG_CONT)
     b44:	80 91 cf 01 	lds	r24, 0x01CF
     b48:	82 ff       	sbrs	r24, 2
     b4a:	80 c0       	rjmp	.+256    	; 0xc4c <sys_mon_main+0x1ce>
                printf("\n");
     b4c:	8a e0       	ldi	r24, 0x0A	; 10
     b4e:	90 e0       	ldi	r25, 0x00	; 0
                pmon->cmdLine[pmon->cursorPos] = 0;
                putchar(c);
            }
        }
    }
}
     b50:	0f 90       	pop	r0
     b52:	df 91       	pop	r29
     b54:	cf 91       	pop	r28
     b56:	1f 91       	pop	r17
        {
            int8_t lenSpaces = mon_printLine(sys_mon.lineIndex, c);
            sys_putnchar(' ', lenSpaces);
            printf("\r");
            if (sys_mon.flags & SYS_MONITOR_FLAG_CONT)
                printf("\n");
     b58:	0c 94 f4 08 	jmp	0x11e8	; 0x11e8 <putchar>
        }
        else
        {
            int8_t len;
            
            printf("\n\n\r");
     b5c:	82 ec       	ldi	r24, 0xC2	; 194
     b5e:	91 e0       	ldi	r25, 0x01	; 1
     b60:	9f 93       	push	r25
     b62:	8f 93       	push	r24
     b64:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <printf>
     b68:	0f 90       	pop	r0
     b6a:	0f 90       	pop	r0
            do
            {
                if (incLineIndex)
     b6c:	11 23       	and	r17, r17
     b6e:	49 f0       	breq	.+18     	; 0xb82 <sys_mon_main+0x104>
                    sys_mon.lineIndex = incLineIndex>0 ? sys_mon.lineIndex+1 : sys_mon.lineIndex-1;
     b70:	80 91 d0 01 	lds	r24, 0x01D0
     b74:	11 30       	cpi	r17, 0x01	; 1
     b76:	11 f4       	brne	.+4      	; 0xb7c <sys_mon_main+0xfe>
     b78:	8f 5f       	subi	r24, 0xFF	; 255
     b7a:	01 c0       	rjmp	.+2      	; 0xb7e <sys_mon_main+0x100>
     b7c:	81 50       	subi	r24, 0x01	; 1
     b7e:	80 93 d0 01 	sts	0x01D0, r24
                len = mon_printLineHeader(sys_mon.lineIndex);
     b82:	80 91 d0 01 	lds	r24, 0x01D0
     b86:	0e 94 33 01 	call	0x266	; 0x266 <mon_printLineHeader>
            }
            while (len<0 && sys_mon.lineIndex!=0);
     b8a:	87 fd       	sbrc	r24, 7
     b8c:	0b c0       	rjmp	.+22     	; 0xba4 <sys_mon_main+0x126>
            
            sys_newline();
     b8e:	89 83       	std	Y+1, r24	; 0x01
     b90:	0e 94 0c 02 	call	0x418	; 0x418 <sys_newline>
            if (len>0)
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	18 16       	cp	r1, r24
     b98:	54 f4       	brge	.+20     	; 0xbae <sys_mon_main+0x130>
                sys_putnchar('-', len);
     b9a:	68 2f       	mov	r22, r24
     b9c:	8d e2       	ldi	r24, 0x2D	; 45
     b9e:	0e 94 2a 05 	call	0xa54	; 0xa54 <sys_putnchar>
     ba2:	05 c0       	rjmp	.+10     	; 0xbae <sys_mon_main+0x130>
            {
                if (incLineIndex)
                    sys_mon.lineIndex = incLineIndex>0 ? sys_mon.lineIndex+1 : sys_mon.lineIndex-1;
                len = mon_printLineHeader(sys_mon.lineIndex);
            }
            while (len<0 && sys_mon.lineIndex!=0);
     ba4:	90 91 d0 01 	lds	r25, 0x01D0
     ba8:	91 11       	cpse	r25, r1
     baa:	e0 cf       	rjmp	.-64     	; 0xb6c <sys_mon_main+0xee>
     bac:	f0 cf       	rjmp	.-32     	; 0xb8e <sys_mon_main+0x110>
            
            sys_newline();
            if (len>0)
                sys_putnchar('-', len);
            sys_newline();
     bae:	0e 94 0c 02 	call	0x418	; 0x418 <sys_newline>
            sys_mon.flags |= SYS_MONITOR_FLAG_LINE;
     bb2:	80 91 cf 01 	lds	r24, 0x01CF
     bb6:	82 60       	ori	r24, 0x02	; 2
     bb8:	80 93 cf 01 	sts	0x01CF, r24
     bbc:	47 c0       	rjmp	.+142    	; 0xc4c <sys_mon_main+0x1ce>
    }
    else
    {
        while (sys_uart_available()>0)
        {
            c = getchar();
     bbe:	80 91 10 02 	lds	r24, 0x0210
     bc2:	90 91 11 02 	lds	r25, 0x0211
     bc6:	0e 94 70 08 	call	0x10e0	; 0x10e0 <fgetc>
            if (lastbyte != '\n' && c == '\r')
     bca:	90 91 cc 01 	lds	r25, 0x01CC
     bce:	9a 30       	cpi	r25, 0x0A	; 10
     bd0:	81 f4       	brne	.+32     	; 0xbf2 <sys_mon_main+0x174>
                c = '\n';
            else
                lastbyte = c;
     bd2:	80 93 cc 01 	sts	0x01CC, r24
            
            if (c==SYS_MONITOR_CTRL_X || c==SYS_MONITOR_CTRL_Y)
     bd6:	98 ee       	ldi	r25, 0xE8	; 232
     bd8:	98 0f       	add	r25, r24
     bda:	92 30       	cpi	r25, 0x02	; 2
     bdc:	70 f4       	brcc	.+28     	; 0xbfa <sys_mon_main+0x17c>
                sys_mon.flags |= SYS_MONITOR_FLAG_LINEMODE;
     bde:	80 91 cf 01 	lds	r24, 0x01CF
     be2:	81 60       	ori	r24, 0x01	; 1
     be4:	80 93 cf 01 	sts	0x01CF, r24
            sys_mon.flags |= SYS_MONITOR_FLAG_LINE;
        }
    }
    else
    {
        while (sys_uart_available()>0)
     be8:	0e 94 20 03 	call	0x640	; 0x640 <sys_uart_available>
     bec:	81 11       	cpse	r24, r1
     bee:	e7 cf       	rjmp	.-50     	; 0xbbe <sys_mon_main+0x140>
     bf0:	2d c0       	rjmp	.+90     	; 0xc4c <sys_mon_main+0x1ce>
        {
            c = getchar();
            if (lastbyte != '\n' && c == '\r')
     bf2:	8d 30       	cpi	r24, 0x0D	; 13
     bf4:	71 f7       	brne	.-36     	; 0xbd2 <sys_mon_main+0x154>
                c = '\n';
     bf6:	8a e0       	ldi	r24, 0x0A	; 10
     bf8:	ee cf       	rjmp	.-36     	; 0xbd6 <sys_mon_main+0x158>
            else
                lastbyte = c;
            
            if (c==SYS_MONITOR_CTRL_X || c==SYS_MONITOR_CTRL_Y)
                sys_mon.flags |= SYS_MONITOR_FLAG_LINEMODE;
            else if (c=='\n')
     bfa:	8a 30       	cpi	r24, 0x0A	; 10
     bfc:	19 f4       	brne	.+6      	; 0xc04 <sys_mon_main+0x186>
                sys_mon_ExecuteCmd();
     bfe:	0e 94 60 04 	call	0x8c0	; 0x8c0 <sys_mon_ExecuteCmd>
     c02:	f2 cf       	rjmp	.-28     	; 0xbe8 <sys_mon_main+0x16a>
            else if (c==127)
     c04:	8f 37       	cpi	r24, 0x7F	; 127
     c06:	81 f3       	breq	.-32     	; 0xbe8 <sys_mon_main+0x16a>
                ; // ignore Taste 'Entf' -> maybe implemented later
            else if (c=='\b')
     c08:	88 30       	cpi	r24, 0x08	; 8
     c0a:	19 f4       	brne	.+6      	; 0xc12 <sys_mon_main+0x194>
                sys_mon_CmdLineBack();
     c0c:	0e 94 14 05 	call	0xa28	; 0xa28 <sys_mon_CmdLineBack>
     c10:	eb cf       	rjmp	.-42     	; 0xbe8 <sys_mon_main+0x16a>
            else if (c<' ' || c>126)
     c12:	90 ee       	ldi	r25, 0xE0	; 224
     c14:	98 0f       	add	r25, r24
     c16:	9f 35       	cpi	r25, 0x5F	; 95
     c18:	38 f7       	brcc	.-50     	; 0xbe8 <sys_mon_main+0x16a>
                ; // ignore control codes
            else if (pmon->cursorPos<(sizeof(pmon->cmdLine)-1))
     c1a:	a0 91 d1 01 	lds	r26, 0x01D1
     c1e:	a7 32       	cpi	r26, 0x27	; 39
     c20:	18 f7       	brcc	.-58     	; 0xbe8 <sys_mon_main+0x16a>
            {
#ifdef GLOBAL_MON_ONLYLOCASE
                c = tolower(c);
#endif
                pmon->cmdLine[pmon->cursorPos++] = c;
     c22:	e1 e0       	ldi	r30, 0x01	; 1
     c24:	ea 0f       	add	r30, r26
     c26:	e0 93 d1 01 	sts	0x01D1, r30
     c2a:	b0 e0       	ldi	r27, 0x00	; 0
     c2c:	a1 53       	subi	r26, 0x31	; 49
     c2e:	be 4f       	sbci	r27, 0xFE	; 254
     c30:	13 96       	adiw	r26, 0x03	; 3
     c32:	8c 93       	st	X, r24
                pmon->cmdLine[pmon->cursorPos] = 0;
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	e1 53       	subi	r30, 0x31	; 49
     c38:	fe 4f       	sbci	r31, 0xFE	; 254
     c3a:	13 82       	std	Z+3, r1	; 0x03
                putchar(c);
     c3c:	60 91 12 02 	lds	r22, 0x0212
     c40:	70 91 13 02 	lds	r23, 0x0213
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	0e 94 ae 08 	call	0x115c	; 0x115c <fputc>
     c4a:	ce cf       	rjmp	.-100    	; 0xbe8 <sys_mon_main+0x16a>
            }
        }
    }
}
     c4c:	0f 90       	pop	r0
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	1f 91       	pop	r17
     c54:	08 95       	ret

00000c56 <sys_main>:


void sys_main (void)
{
#ifdef GLOBAL_MONITOR
    sys_mon_main();
     c56:	0c 94 3f 05 	jmp	0xa7e	; 0xa7e <sys_mon_main>

00000c5a <__vector_18>:
// ------------------------------------
// Interrupt Service Routinen
// ------------------------------------

ISR (SYS_UART_RECEIVE_VECTOR)
{
     c5a:	1f 92       	push	r1
     c5c:	0f 92       	push	r0
     c5e:	0f b6       	in	r0, 0x3f	; 63
     c60:	0f 92       	push	r0
     c62:	11 24       	eor	r1, r1
     c64:	2f 93       	push	r18
     c66:	8f 93       	push	r24
     c68:	9f 93       	push	r25
     c6a:	ef 93       	push	r30
     c6c:	ff 93       	push	r31
    static uint8_t lastChar;
    uint8_t c = SYS_UDR;
     c6e:	80 91 c6 00 	lds	r24, 0x00C6
    
    if (c=='R' && lastChar=='@')
     c72:	82 35       	cpi	r24, 0x52	; 82
     c74:	89 f4       	brne	.+34     	; 0xc98 <__vector_18+0x3e>
     c76:	90 91 cb 01 	lds	r25, 0x01CB
     c7a:	90 34       	cpi	r25, 0x40	; 64
     c7c:	69 f4       	brne	.+26     	; 0xc98 <__vector_18+0x3e>
    {
        wdt_enable(WDTO_15MS);
     c7e:	28 e0       	ldi	r18, 0x08	; 8
     c80:	88 e1       	ldi	r24, 0x18	; 24
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	0f b6       	in	r0, 0x3f	; 63
     c86:	f8 94       	cli
     c88:	a8 95       	wdr
     c8a:	80 93 60 00 	sts	0x0060, r24
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	20 93 60 00 	sts	0x0060, r18
        wdt_reset();
     c94:	a8 95       	wdr
     c96:	ff cf       	rjmp	.-2      	; 0xc96 <__vector_18+0x3c>
        while(1) {};
    }
    lastChar = c;
     c98:	80 93 cb 01 	sts	0x01CB, r24
    
    sys.uart.rbuffer_u8[sys.uart.wpos_u8++] = c;
     c9c:	e0 91 fe 01 	lds	r30, 0x01FE
     ca0:	91 e0       	ldi	r25, 0x01	; 1
     ca2:	9e 0f       	add	r25, r30
     ca4:	90 93 fe 01 	sts	0x01FE, r25
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	e6 50       	subi	r30, 0x06	; 6
     cac:	fe 4f       	sbci	r31, 0xFE	; 254
     cae:	86 83       	std	Z+6, r24	; 0x06
    if (sys.uart.wpos_u8 >= GLOBAL_UART_RECBUFSIZE)
     cb0:	80 91 fe 01 	lds	r24, 0x01FE
     cb4:	80 31       	cpi	r24, 0x10	; 16
     cb6:	10 f0       	brcs	.+4      	; 0xcbc <__vector_18+0x62>
        sys.uart.wpos_u8 = 0;
     cb8:	10 92 fe 01 	sts	0x01FE, r1
    if (sys.uart.wpos_u8 == sys.uart.rpos_u8)
     cbc:	90 91 fe 01 	lds	r25, 0x01FE
     cc0:	80 91 fd 01 	lds	r24, 0x01FD
     cc4:	98 13       	cpse	r25, r24
     cc6:	14 c0       	rjmp	.+40     	; 0xcf0 <__vector_18+0x96>
    {
        sys.uart.wpos_u8 == 0 ? sys.uart.wpos_u8 = GLOBAL_UART_RECBUFSIZE-1 : sys.uart.wpos_u8--;
     cc8:	80 91 fe 01 	lds	r24, 0x01FE
     ccc:	81 11       	cpse	r24, r1
     cce:	02 c0       	rjmp	.+4      	; 0xcd4 <__vector_18+0x7a>
     cd0:	8f e0       	ldi	r24, 0x0F	; 15
     cd2:	03 c0       	rjmp	.+6      	; 0xcda <__vector_18+0x80>
     cd4:	80 91 fe 01 	lds	r24, 0x01FE
     cd8:	81 50       	subi	r24, 0x01	; 1
     cda:	80 93 fe 01 	sts	0x01FE, r24
        sys.uart.errcnt_u8 = sys_inc8BitCnt(sys.uart.errcnt_u8);
     cde:	80 91 ff 01 	lds	r24, 0x01FF

//----------------------------------------------------------------------------

uint8_t sys_inc8BitCnt (uint8_t count)
{
    return count<0xff ? count+1 : count;
     ce2:	8f 3f       	cpi	r24, 0xFF	; 255
     ce4:	11 f0       	breq	.+4      	; 0xcea <__vector_18+0x90>
     ce6:	8f 5f       	subi	r24, 0xFF	; 255
     ce8:	01 c0       	rjmp	.+2      	; 0xcec <__vector_18+0x92>
     cea:	8f ef       	ldi	r24, 0xFF	; 255
    if (sys.uart.wpos_u8 >= GLOBAL_UART_RECBUFSIZE)
        sys.uart.wpos_u8 = 0;
    if (sys.uart.wpos_u8 == sys.uart.rpos_u8)
    {
        sys.uart.wpos_u8 == 0 ? sys.uart.wpos_u8 = GLOBAL_UART_RECBUFSIZE-1 : sys.uart.wpos_u8--;
        sys.uart.errcnt_u8 = sys_inc8BitCnt(sys.uart.errcnt_u8);
     cec:	80 93 ff 01 	sts	0x01FF, r24
    }
    sys.uart.rbuffer_u8[sys.uart.wpos_u8] = 0;
     cf0:	e0 91 fe 01 	lds	r30, 0x01FE
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	e6 50       	subi	r30, 0x06	; 6
     cf8:	fe 4f       	sbci	r31, 0xFE	; 254
     cfa:	16 82       	std	Z+6, r1	; 0x06
}
     cfc:	ff 91       	pop	r31
     cfe:	ef 91       	pop	r30
     d00:	9f 91       	pop	r25
     d02:	8f 91       	pop	r24
     d04:	2f 91       	pop	r18
     d06:	0f 90       	pop	r0
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	0f 90       	pop	r0
     d0c:	1f 90       	pop	r1
     d0e:	18 95       	reti

00000d10 <__vector_14>:
     d10:	1f 92       	push	r1
     d12:	0f 92       	push	r0
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	0f 92       	push	r0
     d18:	11 24       	eor	r1, r1
     d1a:	2f 93       	push	r18
     d1c:	3f 93       	push	r19
     d1e:	4f 93       	push	r20
     d20:	5f 93       	push	r21
     d22:	6f 93       	push	r22
     d24:	7f 93       	push	r23
     d26:	8f 93       	push	r24
     d28:	9f 93       	push	r25
     d2a:	af 93       	push	r26
     d2c:	bf 93       	push	r27
     d2e:	ef 93       	push	r30
     d30:	ff 93       	push	r31
     d32:	80 91 ca 01 	lds	r24, 0x01CA
     d36:	8f 5f       	subi	r24, 0xFF	; 255
     d38:	85 30       	cpi	r24, 0x05	; 5
     d3a:	18 f4       	brcc	.+6      	; 0xd42 <__vector_14+0x32>
     d3c:	80 93 ca 01 	sts	0x01CA, r24
     d40:	43 c0       	rjmp	.+134    	; 0xdc8 <__vector_14+0xb8>
     d42:	10 92 ca 01 	sts	0x01CA, r1
     d46:	80 91 c9 01 	lds	r24, 0x01C9
     d4a:	8f 5f       	subi	r24, 0xFF	; 255
     d4c:	80 93 c9 01 	sts	0x01C9, r24
     d50:	80 91 c8 01 	lds	r24, 0x01C8
     d54:	88 23       	and	r24, r24
     d56:	51 f0       	breq	.+20     	; 0xd6c <__vector_14+0x5c>
     d58:	80 91 fb 01 	lds	r24, 0x01FB
     d5c:	8f 3f       	cpi	r24, 0xFF	; 255
     d5e:	11 f0       	breq	.+4      	; 0xd64 <__vector_14+0x54>
     d60:	8f 5f       	subi	r24, 0xFF	; 255
     d62:	01 c0       	rjmp	.+2      	; 0xd66 <__vector_14+0x56>
     d64:	8f ef       	ldi	r24, 0xFF	; 255
     d66:	80 93 fb 01 	sts	0x01FB, r24
     d6a:	2e c0       	rjmp	.+92     	; 0xdc8 <__vector_14+0xb8>
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	80 93 c8 01 	sts	0x01C8, r24
     d72:	78 94       	sei
     d74:	80 91 c9 01 	lds	r24, 0x01C9
     d78:	80 ff       	sbrs	r24, 0
     d7a:	03 c0       	rjmp	.+6      	; 0xd82 <__vector_14+0x72>
     d7c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <app_task_1ms>
     d80:	21 c0       	rjmp	.+66     	; 0xdc4 <__vector_14+0xb4>
     d82:	81 ff       	sbrs	r24, 1
     d84:	03 c0       	rjmp	.+6      	; 0xd8c <__vector_14+0x7c>
     d86:	0e 94 e7 00 	call	0x1ce	; 0x1ce <app_task_2ms>
     d8a:	1c c0       	rjmp	.+56     	; 0xdc4 <__vector_14+0xb4>
     d8c:	82 ff       	sbrs	r24, 2
     d8e:	03 c0       	rjmp	.+6      	; 0xd96 <__vector_14+0x86>
     d90:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <app_task_4ms>
     d94:	17 c0       	rjmp	.+46     	; 0xdc4 <__vector_14+0xb4>
     d96:	83 ff       	sbrs	r24, 3
     d98:	03 c0       	rjmp	.+6      	; 0xda0 <__vector_14+0x90>
     d9a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <app_task_8ms>
     d9e:	12 c0       	rjmp	.+36     	; 0xdc4 <__vector_14+0xb4>
     da0:	84 ff       	sbrs	r24, 4
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <__vector_14+0x9a>
     da4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <app_task_16ms>
     da8:	0d c0       	rjmp	.+26     	; 0xdc4 <__vector_14+0xb4>
     daa:	85 ff       	sbrs	r24, 5
     dac:	03 c0       	rjmp	.+6      	; 0xdb4 <__vector_14+0xa4>
     dae:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <app_task_32ms>
     db2:	08 c0       	rjmp	.+16     	; 0xdc4 <__vector_14+0xb4>
     db4:	86 ff       	sbrs	r24, 6
     db6:	03 c0       	rjmp	.+6      	; 0xdbe <__vector_14+0xae>
     db8:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <app_task_64ms>
     dbc:	03 c0       	rjmp	.+6      	; 0xdc4 <__vector_14+0xb4>
     dbe:	87 fd       	sbrc	r24, 7
     dc0:	0e 94 ed 00 	call	0x1da	; 0x1da <app_task_128ms>
     dc4:	10 92 c8 01 	sts	0x01C8, r1
     dc8:	ff 91       	pop	r31
     dca:	ef 91       	pop	r30
     dcc:	bf 91       	pop	r27
     dce:	af 91       	pop	r26
     dd0:	9f 91       	pop	r25
     dd2:	8f 91       	pop	r24
     dd4:	7f 91       	pop	r23
     dd6:	6f 91       	pop	r22
     dd8:	5f 91       	pop	r21
     dda:	4f 91       	pop	r20
     ddc:	3f 91       	pop	r19
     dde:	2f 91       	pop	r18
     de0:	0f 90       	pop	r0
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	0f 90       	pop	r0
     de6:	1f 90       	pop	r1
     de8:	18 95       	reti

00000dea <main>:
const char FLASHSTRING_TIME[] PROGMEM = __TIME__;


int main (void)
{
    sys_init();
     dea:	0e 94 b9 01 	call	0x372	; 0x372 <sys_init>
    app_init();
     dee:	0e 94 de 00 	call	0x1bc	; 0x1bc <app_init>
#ifdef GLOBAL_MONITOR
    mon_init();
     df2:	0e 94 2d 01 	call	0x25a	; 0x25a <mon_init>
#endif
    sys_printString_P(FLASHSTRING_WELCOME);
     df6:	8d e7       	ldi	r24, 0x7D	; 125
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	0e 94 15 02 	call	0x42a	; 0x42a <sys_printString_P>
    sys_printString_P(FLASHSTRING_DATE);
     dfe:	81 e7       	ldi	r24, 0x71	; 113
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	0e 94 15 02 	call	0x42a	; 0x42a <sys_printString_P>
    printf(" ");
     e06:	80 e2       	ldi	r24, 0x20	; 32
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <putchar>
    sys_puts_P(FLASHSTRING_TIME);
     e0e:	88 e6       	ldi	r24, 0x68	; 104
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	0e 94 38 02 	call	0x470	; 0x470 <sys_puts_P>
        sys_lcd_putString(__TIME__);
    }
    else
        printf("not ready (status=%d)\n", sys.lcd.status);
#endif // GLOBAL_SURE_LCD
    sys_newline();
     e16:	0e 94 0c 02 	call	0x418	; 0x418 <sys_newline>
    
#ifdef GLOBAL_MONITOR
    printf(">");
     e1a:	8e e3       	ldi	r24, 0x3E	; 62
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <putchar>
#endif
    
    // enable interrupt system
    sei();
     e22:	78 94       	sei
    
    while (1)
    {
        sys_main();
     e24:	0e 94 2b 06 	call	0xc56	; 0xc56 <sys_main>
        app_main();
     e28:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <app_main>
#ifdef GLOBAL_MONITOR
        mon_main();
     e2c:	0e 94 30 01 	call	0x260	; 0x260 <mon_main>
     e30:	f9 cf       	rjmp	.-14     	; 0xe24 <main+0x3a>

00000e32 <strtol>:
     e32:	2f 92       	push	r2
     e34:	3f 92       	push	r3
     e36:	5f 92       	push	r5
     e38:	6f 92       	push	r6
     e3a:	7f 92       	push	r7
     e3c:	8f 92       	push	r8
     e3e:	9f 92       	push	r9
     e40:	af 92       	push	r10
     e42:	bf 92       	push	r11
     e44:	cf 92       	push	r12
     e46:	df 92       	push	r13
     e48:	ef 92       	push	r14
     e4a:	ff 92       	push	r15
     e4c:	0f 93       	push	r16
     e4e:	1f 93       	push	r17
     e50:	cf 93       	push	r28
     e52:	df 93       	push	r29
     e54:	8b 01       	movw	r16, r22
     e56:	ea 01       	movw	r28, r20
     e58:	61 15       	cp	r22, r1
     e5a:	71 05       	cpc	r23, r1
     e5c:	21 f0       	breq	.+8      	; 0xe66 <strtol+0x34>
     e5e:	db 01       	movw	r26, r22
     e60:	8c 93       	st	X, r24
     e62:	11 96       	adiw	r26, 0x01	; 1
     e64:	9c 93       	st	X, r25
     e66:	20 97       	sbiw	r28, 0x00	; 0
     e68:	39 f0       	breq	.+14     	; 0xe78 <strtol+0x46>
     e6a:	9e 01       	movw	r18, r28
     e6c:	22 50       	subi	r18, 0x02	; 2
     e6e:	31 09       	sbc	r19, r1
     e70:	23 32       	cpi	r18, 0x23	; 35
     e72:	31 05       	cpc	r19, r1
     e74:	08 f0       	brcs	.+2      	; 0xe78 <strtol+0x46>
     e76:	fb c0       	rjmp	.+502    	; 0x106e <strtol+0x23c>
     e78:	7c 01       	movw	r14, r24
     e7a:	67 01       	movw	r12, r14
     e7c:	bf ef       	ldi	r27, 0xFF	; 255
     e7e:	cb 1a       	sub	r12, r27
     e80:	db 0a       	sbc	r13, r27
     e82:	56 01       	movw	r10, r12
     e84:	f7 01       	movw	r30, r14
     e86:	60 80       	ld	r6, Z
     e88:	86 2d       	mov	r24, r6
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	0e 94 4d 08 	call	0x109a	; 0x109a <isspace>
     e90:	89 2b       	or	r24, r25
     e92:	11 f0       	breq	.+4      	; 0xe98 <strtol+0x66>
     e94:	76 01       	movw	r14, r12
     e96:	f1 cf       	rjmp	.-30     	; 0xe7a <strtol+0x48>
     e98:	fd e2       	ldi	r31, 0x2D	; 45
     e9a:	6f 12       	cpse	r6, r31
     e9c:	0a c0       	rjmp	.+20     	; 0xeb2 <strtol+0x80>
     e9e:	57 01       	movw	r10, r14
     ea0:	82 e0       	ldi	r24, 0x02	; 2
     ea2:	a8 0e       	add	r10, r24
     ea4:	b1 1c       	adc	r11, r1
     ea6:	d7 01       	movw	r26, r14
     ea8:	11 96       	adiw	r26, 0x01	; 1
     eaa:	6c 90       	ld	r6, X
     eac:	77 24       	eor	r7, r7
     eae:	73 94       	inc	r7
     eb0:	0b c0       	rjmp	.+22     	; 0xec8 <strtol+0x96>
     eb2:	bb e2       	ldi	r27, 0x2B	; 43
     eb4:	6b 12       	cpse	r6, r27
     eb6:	07 c0       	rjmp	.+14     	; 0xec6 <strtol+0x94>
     eb8:	57 01       	movw	r10, r14
     eba:	e2 e0       	ldi	r30, 0x02	; 2
     ebc:	ae 0e       	add	r10, r30
     ebe:	b1 1c       	adc	r11, r1
     ec0:	d7 01       	movw	r26, r14
     ec2:	11 96       	adiw	r26, 0x01	; 1
     ec4:	6c 90       	ld	r6, X
     ec6:	71 2c       	mov	r7, r1
     ec8:	ce 01       	movw	r24, r28
     eca:	8f 7e       	andi	r24, 0xEF	; 239
     ecc:	89 2b       	or	r24, r25
     ece:	89 f4       	brne	.+34     	; 0xef2 <strtol+0xc0>
     ed0:	b0 e3       	ldi	r27, 0x30	; 48
     ed2:	6b 12       	cpse	r6, r27
     ed4:	22 c0       	rjmp	.+68     	; 0xf1a <strtol+0xe8>
     ed6:	f5 01       	movw	r30, r10
     ed8:	80 81       	ld	r24, Z
     eda:	8f 7d       	andi	r24, 0xDF	; 223
     edc:	88 35       	cpi	r24, 0x58	; 88
     ede:	41 f5       	brne	.+80     	; 0xf30 <strtol+0xfe>
     ee0:	61 80       	ldd	r6, Z+1	; 0x01
     ee2:	f2 e0       	ldi	r31, 0x02	; 2
     ee4:	af 0e       	add	r10, r31
     ee6:	b1 1c       	adc	r11, r1
     ee8:	87 2d       	mov	r24, r7
     eea:	82 60       	ori	r24, 0x02	; 2
     eec:	78 2e       	mov	r7, r24
     eee:	c0 e1       	ldi	r28, 0x10	; 16
     ef0:	d0 e0       	ldi	r29, 0x00	; 0
     ef2:	c8 30       	cpi	r28, 0x08	; 8
     ef4:	d1 05       	cpc	r29, r1
     ef6:	f1 f0       	breq	.+60     	; 0xf34 <strtol+0x102>
     ef8:	4c f4       	brge	.+18     	; 0xf0c <strtol+0xda>
     efa:	c2 30       	cpi	r28, 0x02	; 2
     efc:	d1 05       	cpc	r29, r1
     efe:	11 f5       	brne	.+68     	; 0xf44 <strtol+0x112>
     f00:	c1 2c       	mov	r12, r1
     f02:	d1 2c       	mov	r13, r1
     f04:	e1 2c       	mov	r14, r1
     f06:	b0 e4       	ldi	r27, 0x40	; 64
     f08:	fb 2e       	mov	r15, r27
     f0a:	2f c0       	rjmp	.+94     	; 0xf6a <strtol+0x138>
     f0c:	ca 30       	cpi	r28, 0x0A	; 10
     f0e:	d1 05       	cpc	r29, r1
     f10:	31 f0       	breq	.+12     	; 0xf1e <strtol+0xec>
     f12:	c0 31       	cpi	r28, 0x10	; 16
     f14:	d1 05       	cpc	r29, r1
     f16:	21 f1       	breq	.+72     	; 0xf60 <strtol+0x12e>
     f18:	15 c0       	rjmp	.+42     	; 0xf44 <strtol+0x112>
     f1a:	20 97       	sbiw	r28, 0x00	; 0
     f1c:	51 f7       	brne	.-44     	; 0xef2 <strtol+0xc0>
     f1e:	ca e0       	ldi	r28, 0x0A	; 10
     f20:	d0 e0       	ldi	r29, 0x00	; 0
     f22:	ac ec       	ldi	r26, 0xCC	; 204
     f24:	ca 2e       	mov	r12, r26
     f26:	dc 2c       	mov	r13, r12
     f28:	ec 2c       	mov	r14, r12
     f2a:	ac e0       	ldi	r26, 0x0C	; 12
     f2c:	fa 2e       	mov	r15, r26
     f2e:	1d c0       	rjmp	.+58     	; 0xf6a <strtol+0x138>
     f30:	20 97       	sbiw	r28, 0x00	; 0
     f32:	f9 f6       	brne	.-66     	; 0xef2 <strtol+0xc0>
     f34:	c8 e0       	ldi	r28, 0x08	; 8
     f36:	d0 e0       	ldi	r29, 0x00	; 0
     f38:	c1 2c       	mov	r12, r1
     f3a:	d1 2c       	mov	r13, r1
     f3c:	e1 2c       	mov	r14, r1
     f3e:	f0 e1       	ldi	r31, 0x10	; 16
     f40:	ff 2e       	mov	r15, r31
     f42:	13 c0       	rjmp	.+38     	; 0xf6a <strtol+0x138>
     f44:	60 e0       	ldi	r22, 0x00	; 0
     f46:	70 e0       	ldi	r23, 0x00	; 0
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	90 e8       	ldi	r25, 0x80	; 128
     f4c:	9e 01       	movw	r18, r28
     f4e:	44 27       	eor	r20, r20
     f50:	37 fd       	sbrc	r19, 7
     f52:	40 95       	com	r20
     f54:	54 2f       	mov	r21, r20
     f56:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__udivmodsi4>
     f5a:	69 01       	movw	r12, r18
     f5c:	7a 01       	movw	r14, r20
     f5e:	05 c0       	rjmp	.+10     	; 0xf6a <strtol+0x138>
     f60:	c1 2c       	mov	r12, r1
     f62:	d1 2c       	mov	r13, r1
     f64:	e1 2c       	mov	r14, r1
     f66:	e8 e0       	ldi	r30, 0x08	; 8
     f68:	fe 2e       	mov	r15, r30
     f6a:	f5 01       	movw	r30, r10
     f6c:	60 e0       	ldi	r22, 0x00	; 0
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	a9 01       	movw	r20, r18
     f74:	4e 01       	movw	r8, r28
     f76:	aa 24       	eor	r10, r10
     f78:	97 fc       	sbrc	r9, 7
     f7a:	a0 94       	com	r10
     f7c:	ba 2c       	mov	r11, r10
     f7e:	1f 01       	movw	r2, r30
     f80:	70 ed       	ldi	r23, 0xD0	; 208
     f82:	57 2e       	mov	r5, r23
     f84:	56 0c       	add	r5, r6
     f86:	a9 e0       	ldi	r26, 0x09	; 9
     f88:	a5 15       	cp	r26, r5
     f8a:	70 f4       	brcc	.+28     	; 0xfa8 <strtol+0x176>
     f8c:	8f eb       	ldi	r24, 0xBF	; 191
     f8e:	86 0d       	add	r24, r6
     f90:	8a 31       	cpi	r24, 0x1A	; 26
     f92:	18 f4       	brcc	.+6      	; 0xf9a <strtol+0x168>
     f94:	99 ec       	ldi	r25, 0xC9	; 201
     f96:	59 2e       	mov	r5, r25
     f98:	06 c0       	rjmp	.+12     	; 0xfa6 <strtol+0x174>
     f9a:	8f e9       	ldi	r24, 0x9F	; 159
     f9c:	86 0d       	add	r24, r6
     f9e:	8a 31       	cpi	r24, 0x1A	; 26
     fa0:	30 f5       	brcc	.+76     	; 0xfee <strtol+0x1bc>
     fa2:	89 ea       	ldi	r24, 0xA9	; 169
     fa4:	58 2e       	mov	r5, r24
     fa6:	56 0c       	add	r5, r6
     fa8:	85 2d       	mov	r24, r5
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	8c 17       	cp	r24, r28
     fae:	9d 07       	cpc	r25, r29
     fb0:	f4 f4       	brge	.+60     	; 0xfee <strtol+0x1bc>
     fb2:	67 fd       	sbrc	r22, 7
     fb4:	18 c0       	rjmp	.+48     	; 0xfe6 <strtol+0x1b4>
     fb6:	c2 16       	cp	r12, r18
     fb8:	d3 06       	cpc	r13, r19
     fba:	e4 06       	cpc	r14, r20
     fbc:	f5 06       	cpc	r15, r21
     fbe:	80 f0       	brcs	.+32     	; 0xfe0 <strtol+0x1ae>
     fc0:	c5 01       	movw	r24, r10
     fc2:	b4 01       	movw	r22, r8
     fc4:	0e 94 44 0b 	call	0x1688	; 0x1688 <__mulsi3>
     fc8:	9b 01       	movw	r18, r22
     fca:	ac 01       	movw	r20, r24
     fcc:	25 0d       	add	r18, r5
     fce:	31 1d       	adc	r19, r1
     fd0:	41 1d       	adc	r20, r1
     fd2:	51 1d       	adc	r21, r1
     fd4:	21 30       	cpi	r18, 0x01	; 1
     fd6:	31 05       	cpc	r19, r1
     fd8:	41 05       	cpc	r20, r1
     fda:	b0 e8       	ldi	r27, 0x80	; 128
     fdc:	5b 07       	cpc	r21, r27
     fde:	10 f0       	brcs	.+4      	; 0xfe4 <strtol+0x1b2>
     fe0:	6f ef       	ldi	r22, 0xFF	; 255
     fe2:	01 c0       	rjmp	.+2      	; 0xfe6 <strtol+0x1b4>
     fe4:	61 e0       	ldi	r22, 0x01	; 1
     fe6:	31 96       	adiw	r30, 0x01	; 1
     fe8:	d1 01       	movw	r26, r2
     fea:	6c 90       	ld	r6, X
     fec:	c8 cf       	rjmp	.-112    	; 0xf7e <strtol+0x14c>
     fee:	87 2d       	mov	r24, r7
     ff0:	81 70       	andi	r24, 0x01	; 1
     ff2:	01 15       	cp	r16, r1
     ff4:	11 05       	cpc	r17, r1
     ff6:	71 f0       	breq	.+28     	; 0x1014 <strtol+0x1e2>
     ff8:	66 23       	and	r22, r22
     ffa:	29 f0       	breq	.+10     	; 0x1006 <strtol+0x1d4>
     ffc:	31 97       	sbiw	r30, 0x01	; 1
     ffe:	d8 01       	movw	r26, r16
    1000:	ed 93       	st	X+, r30
    1002:	fc 93       	st	X, r31
    1004:	07 c0       	rjmp	.+14     	; 0x1014 <strtol+0x1e2>
    1006:	71 fe       	sbrs	r7, 1
    1008:	19 c0       	rjmp	.+50     	; 0x103c <strtol+0x20a>
    100a:	32 97       	sbiw	r30, 0x02	; 2
    100c:	d8 01       	movw	r26, r16
    100e:	ed 93       	st	X+, r30
    1010:	fc 93       	st	X, r31
    1012:	14 c0       	rjmp	.+40     	; 0x103c <strtol+0x20a>
    1014:	67 ff       	sbrs	r22, 7
    1016:	12 c0       	rjmp	.+36     	; 0x103c <strtol+0x20a>
    1018:	88 23       	and	r24, r24
    101a:	29 f0       	breq	.+10     	; 0x1026 <strtol+0x1f4>
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	40 e0       	ldi	r20, 0x00	; 0
    1022:	50 e8       	ldi	r21, 0x80	; 128
    1024:	04 c0       	rjmp	.+8      	; 0x102e <strtol+0x1fc>
    1026:	2f ef       	ldi	r18, 0xFF	; 255
    1028:	3f ef       	ldi	r19, 0xFF	; 255
    102a:	4f ef       	ldi	r20, 0xFF	; 255
    102c:	5f e7       	ldi	r21, 0x7F	; 127
    102e:	82 e2       	ldi	r24, 0x22	; 34
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	90 93 17 02 	sts	0x0217, r25
    1036:	80 93 16 02 	sts	0x0216, r24
    103a:	16 c0       	rjmp	.+44     	; 0x1068 <strtol+0x236>
    103c:	88 23       	and	r24, r24
    103e:	41 f0       	breq	.+16     	; 0x1050 <strtol+0x21e>
    1040:	50 95       	com	r21
    1042:	40 95       	com	r20
    1044:	30 95       	com	r19
    1046:	21 95       	neg	r18
    1048:	3f 4f       	sbci	r19, 0xFF	; 255
    104a:	4f 4f       	sbci	r20, 0xFF	; 255
    104c:	5f 4f       	sbci	r21, 0xFF	; 255
    104e:	0c c0       	rjmp	.+24     	; 0x1068 <strtol+0x236>
    1050:	57 ff       	sbrs	r21, 7
    1052:	0a c0       	rjmp	.+20     	; 0x1068 <strtol+0x236>
    1054:	82 e2       	ldi	r24, 0x22	; 34
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	90 93 17 02 	sts	0x0217, r25
    105c:	80 93 16 02 	sts	0x0216, r24
    1060:	2f ef       	ldi	r18, 0xFF	; 255
    1062:	3f ef       	ldi	r19, 0xFF	; 255
    1064:	4f ef       	ldi	r20, 0xFF	; 255
    1066:	5f e7       	ldi	r21, 0x7F	; 127
    1068:	b9 01       	movw	r22, r18
    106a:	ca 01       	movw	r24, r20
    106c:	04 c0       	rjmp	.+8      	; 0x1076 <strtol+0x244>
    106e:	60 e0       	ldi	r22, 0x00	; 0
    1070:	70 e0       	ldi	r23, 0x00	; 0
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	df 91       	pop	r29
    1078:	cf 91       	pop	r28
    107a:	1f 91       	pop	r17
    107c:	0f 91       	pop	r16
    107e:	ff 90       	pop	r15
    1080:	ef 90       	pop	r14
    1082:	df 90       	pop	r13
    1084:	cf 90       	pop	r12
    1086:	bf 90       	pop	r11
    1088:	af 90       	pop	r10
    108a:	9f 90       	pop	r9
    108c:	8f 90       	pop	r8
    108e:	7f 90       	pop	r7
    1090:	6f 90       	pop	r6
    1092:	5f 90       	pop	r5
    1094:	3f 90       	pop	r3
    1096:	2f 90       	pop	r2
    1098:	08 95       	ret

0000109a <isspace>:
    109a:	91 11       	cpse	r25, r1
    109c:	7e c2       	rjmp	.+1276   	; 0x159a <__ctype_isfalse>
    109e:	80 32       	cpi	r24, 0x20	; 32
    10a0:	19 f0       	breq	.+6      	; 0x10a8 <isspace+0xe>
    10a2:	89 50       	subi	r24, 0x09	; 9
    10a4:	85 50       	subi	r24, 0x05	; 5
    10a6:	d0 f7       	brcc	.-12     	; 0x109c <isspace+0x2>
    10a8:	08 95       	ret

000010aa <memcpy_P>:
    10aa:	fb 01       	movw	r30, r22
    10ac:	dc 01       	movw	r26, r24
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <memcpy_P+0xa>
    10b0:	05 90       	lpm	r0, Z+
    10b2:	0d 92       	st	X+, r0
    10b4:	41 50       	subi	r20, 0x01	; 1
    10b6:	50 40       	sbci	r21, 0x00	; 0
    10b8:	d8 f7       	brcc	.-10     	; 0x10b0 <memcpy_P+0x6>
    10ba:	08 95       	ret

000010bc <strcmp_P>:
    10bc:	fb 01       	movw	r30, r22
    10be:	dc 01       	movw	r26, r24
    10c0:	8d 91       	ld	r24, X+
    10c2:	05 90       	lpm	r0, Z+
    10c4:	80 19       	sub	r24, r0
    10c6:	01 10       	cpse	r0, r1
    10c8:	d9 f3       	breq	.-10     	; 0x10c0 <strcmp_P+0x4>
    10ca:	99 0b       	sbc	r25, r25
    10cc:	08 95       	ret

000010ce <__strlen_P>:
    10ce:	fc 01       	movw	r30, r24
    10d0:	05 90       	lpm	r0, Z+
    10d2:	00 20       	and	r0, r0
    10d4:	e9 f7       	brne	.-6      	; 0x10d0 <__strlen_P+0x2>
    10d6:	80 95       	com	r24
    10d8:	90 95       	com	r25
    10da:	8e 0f       	add	r24, r30
    10dc:	9f 1f       	adc	r25, r31
    10de:	08 95       	ret

000010e0 <fgetc>:
    10e0:	cf 93       	push	r28
    10e2:	df 93       	push	r29
    10e4:	ec 01       	movw	r28, r24
    10e6:	2b 81       	ldd	r18, Y+3	; 0x03
    10e8:	20 ff       	sbrs	r18, 0
    10ea:	33 c0       	rjmp	.+102    	; 0x1152 <fgetc+0x72>
    10ec:	26 ff       	sbrs	r18, 6
    10ee:	0a c0       	rjmp	.+20     	; 0x1104 <fgetc+0x24>
    10f0:	2f 7b       	andi	r18, 0xBF	; 191
    10f2:	2b 83       	std	Y+3, r18	; 0x03
    10f4:	8e 81       	ldd	r24, Y+6	; 0x06
    10f6:	9f 81       	ldd	r25, Y+7	; 0x07
    10f8:	01 96       	adiw	r24, 0x01	; 1
    10fa:	9f 83       	std	Y+7, r25	; 0x07
    10fc:	8e 83       	std	Y+6, r24	; 0x06
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	29 c0       	rjmp	.+82     	; 0x1156 <fgetc+0x76>
    1104:	22 ff       	sbrs	r18, 2
    1106:	0f c0       	rjmp	.+30     	; 0x1126 <fgetc+0x46>
    1108:	e8 81       	ld	r30, Y
    110a:	f9 81       	ldd	r31, Y+1	; 0x01
    110c:	80 81       	ld	r24, Z
    110e:	99 27       	eor	r25, r25
    1110:	87 fd       	sbrc	r24, 7
    1112:	90 95       	com	r25
    1114:	00 97       	sbiw	r24, 0x00	; 0
    1116:	19 f4       	brne	.+6      	; 0x111e <fgetc+0x3e>
    1118:	20 62       	ori	r18, 0x20	; 32
    111a:	2b 83       	std	Y+3, r18	; 0x03
    111c:	1a c0       	rjmp	.+52     	; 0x1152 <fgetc+0x72>
    111e:	31 96       	adiw	r30, 0x01	; 1
    1120:	f9 83       	std	Y+1, r31	; 0x01
    1122:	e8 83       	st	Y, r30
    1124:	0e c0       	rjmp	.+28     	; 0x1142 <fgetc+0x62>
    1126:	ea 85       	ldd	r30, Y+10	; 0x0a
    1128:	fb 85       	ldd	r31, Y+11	; 0x0b
    112a:	09 95       	icall
    112c:	97 ff       	sbrs	r25, 7
    112e:	09 c0       	rjmp	.+18     	; 0x1142 <fgetc+0x62>
    1130:	2b 81       	ldd	r18, Y+3	; 0x03
    1132:	01 96       	adiw	r24, 0x01	; 1
    1134:	11 f4       	brne	.+4      	; 0x113a <fgetc+0x5a>
    1136:	80 e1       	ldi	r24, 0x10	; 16
    1138:	01 c0       	rjmp	.+2      	; 0x113c <fgetc+0x5c>
    113a:	80 e2       	ldi	r24, 0x20	; 32
    113c:	82 2b       	or	r24, r18
    113e:	8b 83       	std	Y+3, r24	; 0x03
    1140:	08 c0       	rjmp	.+16     	; 0x1152 <fgetc+0x72>
    1142:	2e 81       	ldd	r18, Y+6	; 0x06
    1144:	3f 81       	ldd	r19, Y+7	; 0x07
    1146:	2f 5f       	subi	r18, 0xFF	; 255
    1148:	3f 4f       	sbci	r19, 0xFF	; 255
    114a:	3f 83       	std	Y+7, r19	; 0x07
    114c:	2e 83       	std	Y+6, r18	; 0x06
    114e:	99 27       	eor	r25, r25
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <fgetc+0x76>
    1152:	8f ef       	ldi	r24, 0xFF	; 255
    1154:	9f ef       	ldi	r25, 0xFF	; 255
    1156:	df 91       	pop	r29
    1158:	cf 91       	pop	r28
    115a:	08 95       	ret

0000115c <fputc>:
    115c:	0f 93       	push	r16
    115e:	1f 93       	push	r17
    1160:	cf 93       	push	r28
    1162:	df 93       	push	r29
    1164:	18 2f       	mov	r17, r24
    1166:	09 2f       	mov	r16, r25
    1168:	eb 01       	movw	r28, r22
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	81 fd       	sbrc	r24, 1
    116e:	03 c0       	rjmp	.+6      	; 0x1176 <fputc+0x1a>
    1170:	8f ef       	ldi	r24, 0xFF	; 255
    1172:	9f ef       	ldi	r25, 0xFF	; 255
    1174:	20 c0       	rjmp	.+64     	; 0x11b6 <fputc+0x5a>
    1176:	82 ff       	sbrs	r24, 2
    1178:	10 c0       	rjmp	.+32     	; 0x119a <fputc+0x3e>
    117a:	4e 81       	ldd	r20, Y+6	; 0x06
    117c:	5f 81       	ldd	r21, Y+7	; 0x07
    117e:	2c 81       	ldd	r18, Y+4	; 0x04
    1180:	3d 81       	ldd	r19, Y+5	; 0x05
    1182:	42 17       	cp	r20, r18
    1184:	53 07       	cpc	r21, r19
    1186:	7c f4       	brge	.+30     	; 0x11a6 <fputc+0x4a>
    1188:	e8 81       	ld	r30, Y
    118a:	f9 81       	ldd	r31, Y+1	; 0x01
    118c:	9f 01       	movw	r18, r30
    118e:	2f 5f       	subi	r18, 0xFF	; 255
    1190:	3f 4f       	sbci	r19, 0xFF	; 255
    1192:	39 83       	std	Y+1, r19	; 0x01
    1194:	28 83       	st	Y, r18
    1196:	10 83       	st	Z, r17
    1198:	06 c0       	rjmp	.+12     	; 0x11a6 <fputc+0x4a>
    119a:	e8 85       	ldd	r30, Y+8	; 0x08
    119c:	f9 85       	ldd	r31, Y+9	; 0x09
    119e:	81 2f       	mov	r24, r17
    11a0:	09 95       	icall
    11a2:	89 2b       	or	r24, r25
    11a4:	29 f7       	brne	.-54     	; 0x1170 <fputc+0x14>
    11a6:	2e 81       	ldd	r18, Y+6	; 0x06
    11a8:	3f 81       	ldd	r19, Y+7	; 0x07
    11aa:	2f 5f       	subi	r18, 0xFF	; 255
    11ac:	3f 4f       	sbci	r19, 0xFF	; 255
    11ae:	3f 83       	std	Y+7, r19	; 0x07
    11b0:	2e 83       	std	Y+6, r18	; 0x06
    11b2:	81 2f       	mov	r24, r17
    11b4:	90 2f       	mov	r25, r16
    11b6:	df 91       	pop	r29
    11b8:	cf 91       	pop	r28
    11ba:	1f 91       	pop	r17
    11bc:	0f 91       	pop	r16
    11be:	08 95       	ret

000011c0 <printf>:
    11c0:	a0 e0       	ldi	r26, 0x00	; 0
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	e6 ee       	ldi	r30, 0xE6	; 230
    11c6:	f8 e0       	ldi	r31, 0x08	; 8
    11c8:	0c 94 91 0b 	jmp	0x1722	; 0x1722 <__prologue_saves__+0x20>
    11cc:	fe 01       	movw	r30, r28
    11ce:	35 96       	adiw	r30, 0x05	; 5
    11d0:	61 91       	ld	r22, Z+
    11d2:	71 91       	ld	r23, Z+
    11d4:	af 01       	movw	r20, r30
    11d6:	80 91 12 02 	lds	r24, 0x0212
    11da:	90 91 13 02 	lds	r25, 0x0213
    11de:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <vfprintf>
    11e2:	e2 e0       	ldi	r30, 0x02	; 2
    11e4:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__epilogue_restores__+0x20>

000011e8 <putchar>:
    11e8:	60 91 12 02 	lds	r22, 0x0212
    11ec:	70 91 13 02 	lds	r23, 0x0213
    11f0:	0e 94 ae 08 	call	0x115c	; 0x115c <fputc>
    11f4:	08 95       	ret

000011f6 <vfprintf>:
    11f6:	ac e0       	ldi	r26, 0x0C	; 12
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	e1 e0       	ldi	r30, 0x01	; 1
    11fc:	f9 e0       	ldi	r31, 0x09	; 9
    11fe:	0c 94 81 0b 	jmp	0x1702	; 0x1702 <__prologue_saves__>
    1202:	7c 01       	movw	r14, r24
    1204:	6b 01       	movw	r12, r22
    1206:	8a 01       	movw	r16, r20
    1208:	fc 01       	movw	r30, r24
    120a:	17 82       	std	Z+7, r1	; 0x07
    120c:	16 82       	std	Z+6, r1	; 0x06
    120e:	83 81       	ldd	r24, Z+3	; 0x03
    1210:	81 ff       	sbrs	r24, 1
    1212:	bd c1       	rjmp	.+890    	; 0x158e <vfprintf+0x398>
    1214:	ce 01       	movw	r24, r28
    1216:	01 96       	adiw	r24, 0x01	; 1
    1218:	4c 01       	movw	r8, r24
    121a:	f7 01       	movw	r30, r14
    121c:	93 81       	ldd	r25, Z+3	; 0x03
    121e:	f6 01       	movw	r30, r12
    1220:	93 fd       	sbrc	r25, 3
    1222:	85 91       	lpm	r24, Z+
    1224:	93 ff       	sbrs	r25, 3
    1226:	81 91       	ld	r24, Z+
    1228:	6f 01       	movw	r12, r30
    122a:	88 23       	and	r24, r24
    122c:	09 f4       	brne	.+2      	; 0x1230 <vfprintf+0x3a>
    122e:	ab c1       	rjmp	.+854    	; 0x1586 <vfprintf+0x390>
    1230:	85 32       	cpi	r24, 0x25	; 37
    1232:	39 f4       	brne	.+14     	; 0x1242 <vfprintf+0x4c>
    1234:	93 fd       	sbrc	r25, 3
    1236:	85 91       	lpm	r24, Z+
    1238:	93 ff       	sbrs	r25, 3
    123a:	81 91       	ld	r24, Z+
    123c:	6f 01       	movw	r12, r30
    123e:	85 32       	cpi	r24, 0x25	; 37
    1240:	29 f4       	brne	.+10     	; 0x124c <vfprintf+0x56>
    1242:	b7 01       	movw	r22, r14
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	0e 94 ae 08 	call	0x115c	; 0x115c <fputc>
    124a:	e7 cf       	rjmp	.-50     	; 0x121a <vfprintf+0x24>
    124c:	51 2c       	mov	r5, r1
    124e:	31 2c       	mov	r3, r1
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	20 32       	cpi	r18, 0x20	; 32
    1254:	a0 f4       	brcc	.+40     	; 0x127e <vfprintf+0x88>
    1256:	8b 32       	cpi	r24, 0x2B	; 43
    1258:	69 f0       	breq	.+26     	; 0x1274 <vfprintf+0x7e>
    125a:	30 f4       	brcc	.+12     	; 0x1268 <vfprintf+0x72>
    125c:	80 32       	cpi	r24, 0x20	; 32
    125e:	59 f0       	breq	.+22     	; 0x1276 <vfprintf+0x80>
    1260:	83 32       	cpi	r24, 0x23	; 35
    1262:	69 f4       	brne	.+26     	; 0x127e <vfprintf+0x88>
    1264:	20 61       	ori	r18, 0x10	; 16
    1266:	2c c0       	rjmp	.+88     	; 0x12c0 <vfprintf+0xca>
    1268:	8d 32       	cpi	r24, 0x2D	; 45
    126a:	39 f0       	breq	.+14     	; 0x127a <vfprintf+0x84>
    126c:	80 33       	cpi	r24, 0x30	; 48
    126e:	39 f4       	brne	.+14     	; 0x127e <vfprintf+0x88>
    1270:	21 60       	ori	r18, 0x01	; 1
    1272:	26 c0       	rjmp	.+76     	; 0x12c0 <vfprintf+0xca>
    1274:	22 60       	ori	r18, 0x02	; 2
    1276:	24 60       	ori	r18, 0x04	; 4
    1278:	23 c0       	rjmp	.+70     	; 0x12c0 <vfprintf+0xca>
    127a:	28 60       	ori	r18, 0x08	; 8
    127c:	21 c0       	rjmp	.+66     	; 0x12c0 <vfprintf+0xca>
    127e:	27 fd       	sbrc	r18, 7
    1280:	27 c0       	rjmp	.+78     	; 0x12d0 <vfprintf+0xda>
    1282:	30 ed       	ldi	r19, 0xD0	; 208
    1284:	38 0f       	add	r19, r24
    1286:	3a 30       	cpi	r19, 0x0A	; 10
    1288:	78 f4       	brcc	.+30     	; 0x12a8 <vfprintf+0xb2>
    128a:	26 ff       	sbrs	r18, 6
    128c:	06 c0       	rjmp	.+12     	; 0x129a <vfprintf+0xa4>
    128e:	fa e0       	ldi	r31, 0x0A	; 10
    1290:	5f 9e       	mul	r5, r31
    1292:	30 0d       	add	r19, r0
    1294:	11 24       	eor	r1, r1
    1296:	53 2e       	mov	r5, r19
    1298:	13 c0       	rjmp	.+38     	; 0x12c0 <vfprintf+0xca>
    129a:	8a e0       	ldi	r24, 0x0A	; 10
    129c:	38 9e       	mul	r3, r24
    129e:	30 0d       	add	r19, r0
    12a0:	11 24       	eor	r1, r1
    12a2:	33 2e       	mov	r3, r19
    12a4:	20 62       	ori	r18, 0x20	; 32
    12a6:	0c c0       	rjmp	.+24     	; 0x12c0 <vfprintf+0xca>
    12a8:	8e 32       	cpi	r24, 0x2E	; 46
    12aa:	21 f4       	brne	.+8      	; 0x12b4 <vfprintf+0xbe>
    12ac:	26 fd       	sbrc	r18, 6
    12ae:	6b c1       	rjmp	.+726    	; 0x1586 <vfprintf+0x390>
    12b0:	20 64       	ori	r18, 0x40	; 64
    12b2:	06 c0       	rjmp	.+12     	; 0x12c0 <vfprintf+0xca>
    12b4:	8c 36       	cpi	r24, 0x6C	; 108
    12b6:	11 f4       	brne	.+4      	; 0x12bc <vfprintf+0xc6>
    12b8:	20 68       	ori	r18, 0x80	; 128
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <vfprintf+0xca>
    12bc:	88 36       	cpi	r24, 0x68	; 104
    12be:	41 f4       	brne	.+16     	; 0x12d0 <vfprintf+0xda>
    12c0:	f6 01       	movw	r30, r12
    12c2:	93 fd       	sbrc	r25, 3
    12c4:	85 91       	lpm	r24, Z+
    12c6:	93 ff       	sbrs	r25, 3
    12c8:	81 91       	ld	r24, Z+
    12ca:	6f 01       	movw	r12, r30
    12cc:	81 11       	cpse	r24, r1
    12ce:	c1 cf       	rjmp	.-126    	; 0x1252 <vfprintf+0x5c>
    12d0:	98 2f       	mov	r25, r24
    12d2:	9f 7d       	andi	r25, 0xDF	; 223
    12d4:	95 54       	subi	r25, 0x45	; 69
    12d6:	93 30       	cpi	r25, 0x03	; 3
    12d8:	28 f4       	brcc	.+10     	; 0x12e4 <vfprintf+0xee>
    12da:	0c 5f       	subi	r16, 0xFC	; 252
    12dc:	1f 4f       	sbci	r17, 0xFF	; 255
    12de:	ff e3       	ldi	r31, 0x3F	; 63
    12e0:	f9 83       	std	Y+1, r31	; 0x01
    12e2:	0d c0       	rjmp	.+26     	; 0x12fe <vfprintf+0x108>
    12e4:	83 36       	cpi	r24, 0x63	; 99
    12e6:	31 f0       	breq	.+12     	; 0x12f4 <vfprintf+0xfe>
    12e8:	83 37       	cpi	r24, 0x73	; 115
    12ea:	71 f0       	breq	.+28     	; 0x1308 <vfprintf+0x112>
    12ec:	83 35       	cpi	r24, 0x53	; 83
    12ee:	09 f0       	breq	.+2      	; 0x12f2 <vfprintf+0xfc>
    12f0:	5b c0       	rjmp	.+182    	; 0x13a8 <vfprintf+0x1b2>
    12f2:	22 c0       	rjmp	.+68     	; 0x1338 <vfprintf+0x142>
    12f4:	f8 01       	movw	r30, r16
    12f6:	80 81       	ld	r24, Z
    12f8:	89 83       	std	Y+1, r24	; 0x01
    12fa:	0e 5f       	subi	r16, 0xFE	; 254
    12fc:	1f 4f       	sbci	r17, 0xFF	; 255
    12fe:	44 24       	eor	r4, r4
    1300:	43 94       	inc	r4
    1302:	51 2c       	mov	r5, r1
    1304:	54 01       	movw	r10, r8
    1306:	15 c0       	rjmp	.+42     	; 0x1332 <vfprintf+0x13c>
    1308:	38 01       	movw	r6, r16
    130a:	f2 e0       	ldi	r31, 0x02	; 2
    130c:	6f 0e       	add	r6, r31
    130e:	71 1c       	adc	r7, r1
    1310:	f8 01       	movw	r30, r16
    1312:	a0 80       	ld	r10, Z
    1314:	b1 80       	ldd	r11, Z+1	; 0x01
    1316:	26 ff       	sbrs	r18, 6
    1318:	03 c0       	rjmp	.+6      	; 0x1320 <vfprintf+0x12a>
    131a:	65 2d       	mov	r22, r5
    131c:	70 e0       	ldi	r23, 0x00	; 0
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <vfprintf+0x12e>
    1320:	6f ef       	ldi	r22, 0xFF	; 255
    1322:	7f ef       	ldi	r23, 0xFF	; 255
    1324:	c5 01       	movw	r24, r10
    1326:	2c 87       	std	Y+12, r18	; 0x0c
    1328:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <strnlen>
    132c:	2c 01       	movw	r4, r24
    132e:	83 01       	movw	r16, r6
    1330:	2c 85       	ldd	r18, Y+12	; 0x0c
    1332:	2f 77       	andi	r18, 0x7F	; 127
    1334:	22 2e       	mov	r2, r18
    1336:	17 c0       	rjmp	.+46     	; 0x1366 <vfprintf+0x170>
    1338:	38 01       	movw	r6, r16
    133a:	f2 e0       	ldi	r31, 0x02	; 2
    133c:	6f 0e       	add	r6, r31
    133e:	71 1c       	adc	r7, r1
    1340:	f8 01       	movw	r30, r16
    1342:	a0 80       	ld	r10, Z
    1344:	b1 80       	ldd	r11, Z+1	; 0x01
    1346:	26 ff       	sbrs	r18, 6
    1348:	03 c0       	rjmp	.+6      	; 0x1350 <vfprintf+0x15a>
    134a:	65 2d       	mov	r22, r5
    134c:	70 e0       	ldi	r23, 0x00	; 0
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <vfprintf+0x15e>
    1350:	6f ef       	ldi	r22, 0xFF	; 255
    1352:	7f ef       	ldi	r23, 0xFF	; 255
    1354:	c5 01       	movw	r24, r10
    1356:	2c 87       	std	Y+12, r18	; 0x0c
    1358:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <strnlen_P>
    135c:	2c 01       	movw	r4, r24
    135e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1360:	20 68       	ori	r18, 0x80	; 128
    1362:	22 2e       	mov	r2, r18
    1364:	83 01       	movw	r16, r6
    1366:	23 fc       	sbrc	r2, 3
    1368:	1b c0       	rjmp	.+54     	; 0x13a0 <vfprintf+0x1aa>
    136a:	83 2d       	mov	r24, r3
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	48 16       	cp	r4, r24
    1370:	59 06       	cpc	r5, r25
    1372:	b0 f4       	brcc	.+44     	; 0x13a0 <vfprintf+0x1aa>
    1374:	b7 01       	movw	r22, r14
    1376:	80 e2       	ldi	r24, 0x20	; 32
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	0e 94 ae 08 	call	0x115c	; 0x115c <fputc>
    137e:	3a 94       	dec	r3
    1380:	f4 cf       	rjmp	.-24     	; 0x136a <vfprintf+0x174>
    1382:	f5 01       	movw	r30, r10
    1384:	27 fc       	sbrc	r2, 7
    1386:	85 91       	lpm	r24, Z+
    1388:	27 fe       	sbrs	r2, 7
    138a:	81 91       	ld	r24, Z+
    138c:	5f 01       	movw	r10, r30
    138e:	b7 01       	movw	r22, r14
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	0e 94 ae 08 	call	0x115c	; 0x115c <fputc>
    1396:	31 10       	cpse	r3, r1
    1398:	3a 94       	dec	r3
    139a:	f1 e0       	ldi	r31, 0x01	; 1
    139c:	4f 1a       	sub	r4, r31
    139e:	51 08       	sbc	r5, r1
    13a0:	41 14       	cp	r4, r1
    13a2:	51 04       	cpc	r5, r1
    13a4:	71 f7       	brne	.-36     	; 0x1382 <vfprintf+0x18c>
    13a6:	e5 c0       	rjmp	.+458    	; 0x1572 <vfprintf+0x37c>
    13a8:	84 36       	cpi	r24, 0x64	; 100
    13aa:	11 f0       	breq	.+4      	; 0x13b0 <vfprintf+0x1ba>
    13ac:	89 36       	cpi	r24, 0x69	; 105
    13ae:	39 f5       	brne	.+78     	; 0x13fe <vfprintf+0x208>
    13b0:	f8 01       	movw	r30, r16
    13b2:	27 ff       	sbrs	r18, 7
    13b4:	07 c0       	rjmp	.+14     	; 0x13c4 <vfprintf+0x1ce>
    13b6:	60 81       	ld	r22, Z
    13b8:	71 81       	ldd	r23, Z+1	; 0x01
    13ba:	82 81       	ldd	r24, Z+2	; 0x02
    13bc:	93 81       	ldd	r25, Z+3	; 0x03
    13be:	0c 5f       	subi	r16, 0xFC	; 252
    13c0:	1f 4f       	sbci	r17, 0xFF	; 255
    13c2:	08 c0       	rjmp	.+16     	; 0x13d4 <vfprintf+0x1de>
    13c4:	60 81       	ld	r22, Z
    13c6:	71 81       	ldd	r23, Z+1	; 0x01
    13c8:	88 27       	eor	r24, r24
    13ca:	77 fd       	sbrc	r23, 7
    13cc:	80 95       	com	r24
    13ce:	98 2f       	mov	r25, r24
    13d0:	0e 5f       	subi	r16, 0xFE	; 254
    13d2:	1f 4f       	sbci	r17, 0xFF	; 255
    13d4:	2f 76       	andi	r18, 0x6F	; 111
    13d6:	b2 2e       	mov	r11, r18
    13d8:	97 ff       	sbrs	r25, 7
    13da:	09 c0       	rjmp	.+18     	; 0x13ee <vfprintf+0x1f8>
    13dc:	90 95       	com	r25
    13de:	80 95       	com	r24
    13e0:	70 95       	com	r23
    13e2:	61 95       	neg	r22
    13e4:	7f 4f       	sbci	r23, 0xFF	; 255
    13e6:	8f 4f       	sbci	r24, 0xFF	; 255
    13e8:	9f 4f       	sbci	r25, 0xFF	; 255
    13ea:	20 68       	ori	r18, 0x80	; 128
    13ec:	b2 2e       	mov	r11, r18
    13ee:	2a e0       	ldi	r18, 0x0A	; 10
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	a4 01       	movw	r20, r8
    13f4:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__ultoa_invert>
    13f8:	a8 2e       	mov	r10, r24
    13fa:	a8 18       	sub	r10, r8
    13fc:	44 c0       	rjmp	.+136    	; 0x1486 <vfprintf+0x290>
    13fe:	85 37       	cpi	r24, 0x75	; 117
    1400:	29 f4       	brne	.+10     	; 0x140c <vfprintf+0x216>
    1402:	2f 7e       	andi	r18, 0xEF	; 239
    1404:	b2 2e       	mov	r11, r18
    1406:	2a e0       	ldi	r18, 0x0A	; 10
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	25 c0       	rjmp	.+74     	; 0x1456 <vfprintf+0x260>
    140c:	f2 2f       	mov	r31, r18
    140e:	f9 7f       	andi	r31, 0xF9	; 249
    1410:	bf 2e       	mov	r11, r31
    1412:	8f 36       	cpi	r24, 0x6F	; 111
    1414:	c1 f0       	breq	.+48     	; 0x1446 <vfprintf+0x250>
    1416:	18 f4       	brcc	.+6      	; 0x141e <vfprintf+0x228>
    1418:	88 35       	cpi	r24, 0x58	; 88
    141a:	79 f0       	breq	.+30     	; 0x143a <vfprintf+0x244>
    141c:	b4 c0       	rjmp	.+360    	; 0x1586 <vfprintf+0x390>
    141e:	80 37       	cpi	r24, 0x70	; 112
    1420:	19 f0       	breq	.+6      	; 0x1428 <vfprintf+0x232>
    1422:	88 37       	cpi	r24, 0x78	; 120
    1424:	21 f0       	breq	.+8      	; 0x142e <vfprintf+0x238>
    1426:	af c0       	rjmp	.+350    	; 0x1586 <vfprintf+0x390>
    1428:	2f 2f       	mov	r18, r31
    142a:	20 61       	ori	r18, 0x10	; 16
    142c:	b2 2e       	mov	r11, r18
    142e:	b4 fe       	sbrs	r11, 4
    1430:	0d c0       	rjmp	.+26     	; 0x144c <vfprintf+0x256>
    1432:	8b 2d       	mov	r24, r11
    1434:	84 60       	ori	r24, 0x04	; 4
    1436:	b8 2e       	mov	r11, r24
    1438:	09 c0       	rjmp	.+18     	; 0x144c <vfprintf+0x256>
    143a:	24 ff       	sbrs	r18, 4
    143c:	0a c0       	rjmp	.+20     	; 0x1452 <vfprintf+0x25c>
    143e:	9f 2f       	mov	r25, r31
    1440:	96 60       	ori	r25, 0x06	; 6
    1442:	b9 2e       	mov	r11, r25
    1444:	06 c0       	rjmp	.+12     	; 0x1452 <vfprintf+0x25c>
    1446:	28 e0       	ldi	r18, 0x08	; 8
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	05 c0       	rjmp	.+10     	; 0x1456 <vfprintf+0x260>
    144c:	20 e1       	ldi	r18, 0x10	; 16
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <vfprintf+0x260>
    1452:	20 e1       	ldi	r18, 0x10	; 16
    1454:	32 e0       	ldi	r19, 0x02	; 2
    1456:	f8 01       	movw	r30, r16
    1458:	b7 fe       	sbrs	r11, 7
    145a:	07 c0       	rjmp	.+14     	; 0x146a <vfprintf+0x274>
    145c:	60 81       	ld	r22, Z
    145e:	71 81       	ldd	r23, Z+1	; 0x01
    1460:	82 81       	ldd	r24, Z+2	; 0x02
    1462:	93 81       	ldd	r25, Z+3	; 0x03
    1464:	0c 5f       	subi	r16, 0xFC	; 252
    1466:	1f 4f       	sbci	r17, 0xFF	; 255
    1468:	06 c0       	rjmp	.+12     	; 0x1476 <vfprintf+0x280>
    146a:	60 81       	ld	r22, Z
    146c:	71 81       	ldd	r23, Z+1	; 0x01
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	0e 5f       	subi	r16, 0xFE	; 254
    1474:	1f 4f       	sbci	r17, 0xFF	; 255
    1476:	a4 01       	movw	r20, r8
    1478:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__ultoa_invert>
    147c:	a8 2e       	mov	r10, r24
    147e:	a8 18       	sub	r10, r8
    1480:	fb 2d       	mov	r31, r11
    1482:	ff 77       	andi	r31, 0x7F	; 127
    1484:	bf 2e       	mov	r11, r31
    1486:	b6 fe       	sbrs	r11, 6
    1488:	0b c0       	rjmp	.+22     	; 0x14a0 <vfprintf+0x2aa>
    148a:	2b 2d       	mov	r18, r11
    148c:	2e 7f       	andi	r18, 0xFE	; 254
    148e:	a5 14       	cp	r10, r5
    1490:	50 f4       	brcc	.+20     	; 0x14a6 <vfprintf+0x2b0>
    1492:	b4 fe       	sbrs	r11, 4
    1494:	0a c0       	rjmp	.+20     	; 0x14aa <vfprintf+0x2b4>
    1496:	b2 fc       	sbrc	r11, 2
    1498:	08 c0       	rjmp	.+16     	; 0x14aa <vfprintf+0x2b4>
    149a:	2b 2d       	mov	r18, r11
    149c:	2e 7e       	andi	r18, 0xEE	; 238
    149e:	05 c0       	rjmp	.+10     	; 0x14aa <vfprintf+0x2b4>
    14a0:	7a 2c       	mov	r7, r10
    14a2:	2b 2d       	mov	r18, r11
    14a4:	03 c0       	rjmp	.+6      	; 0x14ac <vfprintf+0x2b6>
    14a6:	7a 2c       	mov	r7, r10
    14a8:	01 c0       	rjmp	.+2      	; 0x14ac <vfprintf+0x2b6>
    14aa:	75 2c       	mov	r7, r5
    14ac:	24 ff       	sbrs	r18, 4
    14ae:	0d c0       	rjmp	.+26     	; 0x14ca <vfprintf+0x2d4>
    14b0:	fe 01       	movw	r30, r28
    14b2:	ea 0d       	add	r30, r10
    14b4:	f1 1d       	adc	r31, r1
    14b6:	80 81       	ld	r24, Z
    14b8:	80 33       	cpi	r24, 0x30	; 48
    14ba:	11 f4       	brne	.+4      	; 0x14c0 <vfprintf+0x2ca>
    14bc:	29 7e       	andi	r18, 0xE9	; 233
    14be:	09 c0       	rjmp	.+18     	; 0x14d2 <vfprintf+0x2dc>
    14c0:	22 ff       	sbrs	r18, 2
    14c2:	06 c0       	rjmp	.+12     	; 0x14d0 <vfprintf+0x2da>
    14c4:	73 94       	inc	r7
    14c6:	73 94       	inc	r7
    14c8:	04 c0       	rjmp	.+8      	; 0x14d2 <vfprintf+0x2dc>
    14ca:	82 2f       	mov	r24, r18
    14cc:	86 78       	andi	r24, 0x86	; 134
    14ce:	09 f0       	breq	.+2      	; 0x14d2 <vfprintf+0x2dc>
    14d0:	73 94       	inc	r7
    14d2:	23 fd       	sbrc	r18, 3
    14d4:	13 c0       	rjmp	.+38     	; 0x14fc <vfprintf+0x306>
    14d6:	20 ff       	sbrs	r18, 0
    14d8:	06 c0       	rjmp	.+12     	; 0x14e6 <vfprintf+0x2f0>
    14da:	5a 2c       	mov	r5, r10
    14dc:	73 14       	cp	r7, r3
    14de:	18 f4       	brcc	.+6      	; 0x14e6 <vfprintf+0x2f0>
    14e0:	53 0c       	add	r5, r3
    14e2:	57 18       	sub	r5, r7
    14e4:	73 2c       	mov	r7, r3
    14e6:	73 14       	cp	r7, r3
    14e8:	68 f4       	brcc	.+26     	; 0x1504 <vfprintf+0x30e>
    14ea:	b7 01       	movw	r22, r14
    14ec:	80 e2       	ldi	r24, 0x20	; 32
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	2c 87       	std	Y+12, r18	; 0x0c
    14f2:	0e 94 ae 08 	call	0x115c	; 0x115c <fputc>
    14f6:	73 94       	inc	r7
    14f8:	2c 85       	ldd	r18, Y+12	; 0x0c
    14fa:	f5 cf       	rjmp	.-22     	; 0x14e6 <vfprintf+0x2f0>
    14fc:	73 14       	cp	r7, r3
    14fe:	10 f4       	brcc	.+4      	; 0x1504 <vfprintf+0x30e>
    1500:	37 18       	sub	r3, r7
    1502:	01 c0       	rjmp	.+2      	; 0x1506 <vfprintf+0x310>
    1504:	31 2c       	mov	r3, r1
    1506:	24 ff       	sbrs	r18, 4
    1508:	12 c0       	rjmp	.+36     	; 0x152e <vfprintf+0x338>
    150a:	b7 01       	movw	r22, r14
    150c:	80 e3       	ldi	r24, 0x30	; 48
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	2c 87       	std	Y+12, r18	; 0x0c
    1512:	0e 94 ae 08 	call	0x115c	; 0x115c <fputc>
    1516:	2c 85       	ldd	r18, Y+12	; 0x0c
    1518:	22 ff       	sbrs	r18, 2
    151a:	17 c0       	rjmp	.+46     	; 0x154a <vfprintf+0x354>
    151c:	21 ff       	sbrs	r18, 1
    151e:	03 c0       	rjmp	.+6      	; 0x1526 <vfprintf+0x330>
    1520:	88 e5       	ldi	r24, 0x58	; 88
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	02 c0       	rjmp	.+4      	; 0x152a <vfprintf+0x334>
    1526:	88 e7       	ldi	r24, 0x78	; 120
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	b7 01       	movw	r22, r14
    152c:	0c c0       	rjmp	.+24     	; 0x1546 <vfprintf+0x350>
    152e:	82 2f       	mov	r24, r18
    1530:	86 78       	andi	r24, 0x86	; 134
    1532:	59 f0       	breq	.+22     	; 0x154a <vfprintf+0x354>
    1534:	21 fd       	sbrc	r18, 1
    1536:	02 c0       	rjmp	.+4      	; 0x153c <vfprintf+0x346>
    1538:	80 e2       	ldi	r24, 0x20	; 32
    153a:	01 c0       	rjmp	.+2      	; 0x153e <vfprintf+0x348>
    153c:	8b e2       	ldi	r24, 0x2B	; 43
    153e:	27 fd       	sbrc	r18, 7
    1540:	8d e2       	ldi	r24, 0x2D	; 45
    1542:	b7 01       	movw	r22, r14
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	0e 94 ae 08 	call	0x115c	; 0x115c <fputc>
    154a:	a5 14       	cp	r10, r5
    154c:	38 f4       	brcc	.+14     	; 0x155c <vfprintf+0x366>
    154e:	b7 01       	movw	r22, r14
    1550:	80 e3       	ldi	r24, 0x30	; 48
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	0e 94 ae 08 	call	0x115c	; 0x115c <fputc>
    1558:	5a 94       	dec	r5
    155a:	f7 cf       	rjmp	.-18     	; 0x154a <vfprintf+0x354>
    155c:	aa 94       	dec	r10
    155e:	f4 01       	movw	r30, r8
    1560:	ea 0d       	add	r30, r10
    1562:	f1 1d       	adc	r31, r1
    1564:	80 81       	ld	r24, Z
    1566:	b7 01       	movw	r22, r14
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	0e 94 ae 08 	call	0x115c	; 0x115c <fputc>
    156e:	a1 10       	cpse	r10, r1
    1570:	f5 cf       	rjmp	.-22     	; 0x155c <vfprintf+0x366>
    1572:	33 20       	and	r3, r3
    1574:	09 f4       	brne	.+2      	; 0x1578 <vfprintf+0x382>
    1576:	51 ce       	rjmp	.-862    	; 0x121a <vfprintf+0x24>
    1578:	b7 01       	movw	r22, r14
    157a:	80 e2       	ldi	r24, 0x20	; 32
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	0e 94 ae 08 	call	0x115c	; 0x115c <fputc>
    1582:	3a 94       	dec	r3
    1584:	f6 cf       	rjmp	.-20     	; 0x1572 <vfprintf+0x37c>
    1586:	f7 01       	movw	r30, r14
    1588:	86 81       	ldd	r24, Z+6	; 0x06
    158a:	97 81       	ldd	r25, Z+7	; 0x07
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <vfprintf+0x39c>
    158e:	8f ef       	ldi	r24, 0xFF	; 255
    1590:	9f ef       	ldi	r25, 0xFF	; 255
    1592:	2c 96       	adiw	r28, 0x0c	; 12
    1594:	e2 e1       	ldi	r30, 0x12	; 18
    1596:	0c 94 9d 0b 	jmp	0x173a	; 0x173a <__epilogue_restores__>

0000159a <__ctype_isfalse>:
    159a:	99 27       	eor	r25, r25
    159c:	88 27       	eor	r24, r24

0000159e <__ctype_istrue>:
    159e:	08 95       	ret

000015a0 <strnlen_P>:
    15a0:	fc 01       	movw	r30, r24
    15a2:	05 90       	lpm	r0, Z+
    15a4:	61 50       	subi	r22, 0x01	; 1
    15a6:	70 40       	sbci	r23, 0x00	; 0
    15a8:	01 10       	cpse	r0, r1
    15aa:	d8 f7       	brcc	.-10     	; 0x15a2 <strnlen_P+0x2>
    15ac:	80 95       	com	r24
    15ae:	90 95       	com	r25
    15b0:	8e 0f       	add	r24, r30
    15b2:	9f 1f       	adc	r25, r31
    15b4:	08 95       	ret

000015b6 <strnlen>:
    15b6:	fc 01       	movw	r30, r24
    15b8:	61 50       	subi	r22, 0x01	; 1
    15ba:	70 40       	sbci	r23, 0x00	; 0
    15bc:	01 90       	ld	r0, Z+
    15be:	01 10       	cpse	r0, r1
    15c0:	d8 f7       	brcc	.-10     	; 0x15b8 <strnlen+0x2>
    15c2:	80 95       	com	r24
    15c4:	90 95       	com	r25
    15c6:	8e 0f       	add	r24, r30
    15c8:	9f 1f       	adc	r25, r31
    15ca:	08 95       	ret

000015cc <__ultoa_invert>:
    15cc:	fa 01       	movw	r30, r20
    15ce:	aa 27       	eor	r26, r26
    15d0:	28 30       	cpi	r18, 0x08	; 8
    15d2:	51 f1       	breq	.+84     	; 0x1628 <__ultoa_invert+0x5c>
    15d4:	20 31       	cpi	r18, 0x10	; 16
    15d6:	81 f1       	breq	.+96     	; 0x1638 <__ultoa_invert+0x6c>
    15d8:	e8 94       	clt
    15da:	6f 93       	push	r22
    15dc:	6e 7f       	andi	r22, 0xFE	; 254
    15de:	6e 5f       	subi	r22, 0xFE	; 254
    15e0:	7f 4f       	sbci	r23, 0xFF	; 255
    15e2:	8f 4f       	sbci	r24, 0xFF	; 255
    15e4:	9f 4f       	sbci	r25, 0xFF	; 255
    15e6:	af 4f       	sbci	r26, 0xFF	; 255
    15e8:	b1 e0       	ldi	r27, 0x01	; 1
    15ea:	3e d0       	rcall	.+124    	; 0x1668 <__ultoa_invert+0x9c>
    15ec:	b4 e0       	ldi	r27, 0x04	; 4
    15ee:	3c d0       	rcall	.+120    	; 0x1668 <__ultoa_invert+0x9c>
    15f0:	67 0f       	add	r22, r23
    15f2:	78 1f       	adc	r23, r24
    15f4:	89 1f       	adc	r24, r25
    15f6:	9a 1f       	adc	r25, r26
    15f8:	a1 1d       	adc	r26, r1
    15fa:	68 0f       	add	r22, r24
    15fc:	79 1f       	adc	r23, r25
    15fe:	8a 1f       	adc	r24, r26
    1600:	91 1d       	adc	r25, r1
    1602:	a1 1d       	adc	r26, r1
    1604:	6a 0f       	add	r22, r26
    1606:	71 1d       	adc	r23, r1
    1608:	81 1d       	adc	r24, r1
    160a:	91 1d       	adc	r25, r1
    160c:	a1 1d       	adc	r26, r1
    160e:	20 d0       	rcall	.+64     	; 0x1650 <__ultoa_invert+0x84>
    1610:	09 f4       	brne	.+2      	; 0x1614 <__ultoa_invert+0x48>
    1612:	68 94       	set
    1614:	3f 91       	pop	r19
    1616:	2a e0       	ldi	r18, 0x0A	; 10
    1618:	26 9f       	mul	r18, r22
    161a:	11 24       	eor	r1, r1
    161c:	30 19       	sub	r19, r0
    161e:	30 5d       	subi	r19, 0xD0	; 208
    1620:	31 93       	st	Z+, r19
    1622:	de f6       	brtc	.-74     	; 0x15da <__ultoa_invert+0xe>
    1624:	cf 01       	movw	r24, r30
    1626:	08 95       	ret
    1628:	46 2f       	mov	r20, r22
    162a:	47 70       	andi	r20, 0x07	; 7
    162c:	40 5d       	subi	r20, 0xD0	; 208
    162e:	41 93       	st	Z+, r20
    1630:	b3 e0       	ldi	r27, 0x03	; 3
    1632:	0f d0       	rcall	.+30     	; 0x1652 <__ultoa_invert+0x86>
    1634:	c9 f7       	brne	.-14     	; 0x1628 <__ultoa_invert+0x5c>
    1636:	f6 cf       	rjmp	.-20     	; 0x1624 <__ultoa_invert+0x58>
    1638:	46 2f       	mov	r20, r22
    163a:	4f 70       	andi	r20, 0x0F	; 15
    163c:	40 5d       	subi	r20, 0xD0	; 208
    163e:	4a 33       	cpi	r20, 0x3A	; 58
    1640:	18 f0       	brcs	.+6      	; 0x1648 <__ultoa_invert+0x7c>
    1642:	49 5d       	subi	r20, 0xD9	; 217
    1644:	31 fd       	sbrc	r19, 1
    1646:	40 52       	subi	r20, 0x20	; 32
    1648:	41 93       	st	Z+, r20
    164a:	02 d0       	rcall	.+4      	; 0x1650 <__ultoa_invert+0x84>
    164c:	a9 f7       	brne	.-22     	; 0x1638 <__ultoa_invert+0x6c>
    164e:	ea cf       	rjmp	.-44     	; 0x1624 <__ultoa_invert+0x58>
    1650:	b4 e0       	ldi	r27, 0x04	; 4
    1652:	a6 95       	lsr	r26
    1654:	97 95       	ror	r25
    1656:	87 95       	ror	r24
    1658:	77 95       	ror	r23
    165a:	67 95       	ror	r22
    165c:	ba 95       	dec	r27
    165e:	c9 f7       	brne	.-14     	; 0x1652 <__ultoa_invert+0x86>
    1660:	00 97       	sbiw	r24, 0x00	; 0
    1662:	61 05       	cpc	r22, r1
    1664:	71 05       	cpc	r23, r1
    1666:	08 95       	ret
    1668:	9b 01       	movw	r18, r22
    166a:	ac 01       	movw	r20, r24
    166c:	0a 2e       	mov	r0, r26
    166e:	06 94       	lsr	r0
    1670:	57 95       	ror	r21
    1672:	47 95       	ror	r20
    1674:	37 95       	ror	r19
    1676:	27 95       	ror	r18
    1678:	ba 95       	dec	r27
    167a:	c9 f7       	brne	.-14     	; 0x166e <__ultoa_invert+0xa2>
    167c:	62 0f       	add	r22, r18
    167e:	73 1f       	adc	r23, r19
    1680:	84 1f       	adc	r24, r20
    1682:	95 1f       	adc	r25, r21
    1684:	a0 1d       	adc	r26, r0
    1686:	08 95       	ret

00001688 <__mulsi3>:
    1688:	db 01       	movw	r26, r22
    168a:	8f 93       	push	r24
    168c:	9f 93       	push	r25
    168e:	0e 94 76 0b 	call	0x16ec	; 0x16ec <__muluhisi3>
    1692:	bf 91       	pop	r27
    1694:	af 91       	pop	r26
    1696:	a2 9f       	mul	r26, r18
    1698:	80 0d       	add	r24, r0
    169a:	91 1d       	adc	r25, r1
    169c:	a3 9f       	mul	r26, r19
    169e:	90 0d       	add	r25, r0
    16a0:	b2 9f       	mul	r27, r18
    16a2:	90 0d       	add	r25, r0
    16a4:	11 24       	eor	r1, r1
    16a6:	08 95       	ret

000016a8 <__udivmodsi4>:
    16a8:	a1 e2       	ldi	r26, 0x21	; 33
    16aa:	1a 2e       	mov	r1, r26
    16ac:	aa 1b       	sub	r26, r26
    16ae:	bb 1b       	sub	r27, r27
    16b0:	fd 01       	movw	r30, r26
    16b2:	0d c0       	rjmp	.+26     	; 0x16ce <__udivmodsi4_ep>

000016b4 <__udivmodsi4_loop>:
    16b4:	aa 1f       	adc	r26, r26
    16b6:	bb 1f       	adc	r27, r27
    16b8:	ee 1f       	adc	r30, r30
    16ba:	ff 1f       	adc	r31, r31
    16bc:	a2 17       	cp	r26, r18
    16be:	b3 07       	cpc	r27, r19
    16c0:	e4 07       	cpc	r30, r20
    16c2:	f5 07       	cpc	r31, r21
    16c4:	20 f0       	brcs	.+8      	; 0x16ce <__udivmodsi4_ep>
    16c6:	a2 1b       	sub	r26, r18
    16c8:	b3 0b       	sbc	r27, r19
    16ca:	e4 0b       	sbc	r30, r20
    16cc:	f5 0b       	sbc	r31, r21

000016ce <__udivmodsi4_ep>:
    16ce:	66 1f       	adc	r22, r22
    16d0:	77 1f       	adc	r23, r23
    16d2:	88 1f       	adc	r24, r24
    16d4:	99 1f       	adc	r25, r25
    16d6:	1a 94       	dec	r1
    16d8:	69 f7       	brne	.-38     	; 0x16b4 <__udivmodsi4_loop>
    16da:	60 95       	com	r22
    16dc:	70 95       	com	r23
    16de:	80 95       	com	r24
    16e0:	90 95       	com	r25
    16e2:	9b 01       	movw	r18, r22
    16e4:	ac 01       	movw	r20, r24
    16e6:	bd 01       	movw	r22, r26
    16e8:	cf 01       	movw	r24, r30
    16ea:	08 95       	ret

000016ec <__muluhisi3>:
    16ec:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__umulhisi3>
    16f0:	a5 9f       	mul	r26, r21
    16f2:	90 0d       	add	r25, r0
    16f4:	b4 9f       	mul	r27, r20
    16f6:	90 0d       	add	r25, r0
    16f8:	a4 9f       	mul	r26, r20
    16fa:	80 0d       	add	r24, r0
    16fc:	91 1d       	adc	r25, r1
    16fe:	11 24       	eor	r1, r1
    1700:	08 95       	ret

00001702 <__prologue_saves__>:
    1702:	2f 92       	push	r2
    1704:	3f 92       	push	r3
    1706:	4f 92       	push	r4
    1708:	5f 92       	push	r5
    170a:	6f 92       	push	r6
    170c:	7f 92       	push	r7
    170e:	8f 92       	push	r8
    1710:	9f 92       	push	r9
    1712:	af 92       	push	r10
    1714:	bf 92       	push	r11
    1716:	cf 92       	push	r12
    1718:	df 92       	push	r13
    171a:	ef 92       	push	r14
    171c:	ff 92       	push	r15
    171e:	0f 93       	push	r16
    1720:	1f 93       	push	r17
    1722:	cf 93       	push	r28
    1724:	df 93       	push	r29
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62
    172a:	ca 1b       	sub	r28, r26
    172c:	db 0b       	sbc	r29, r27
    172e:	0f b6       	in	r0, 0x3f	; 63
    1730:	f8 94       	cli
    1732:	de bf       	out	0x3e, r29	; 62
    1734:	0f be       	out	0x3f, r0	; 63
    1736:	cd bf       	out	0x3d, r28	; 61
    1738:	09 94       	ijmp

0000173a <__epilogue_restores__>:
    173a:	2a 88       	ldd	r2, Y+18	; 0x12
    173c:	39 88       	ldd	r3, Y+17	; 0x11
    173e:	48 88       	ldd	r4, Y+16	; 0x10
    1740:	5f 84       	ldd	r5, Y+15	; 0x0f
    1742:	6e 84       	ldd	r6, Y+14	; 0x0e
    1744:	7d 84       	ldd	r7, Y+13	; 0x0d
    1746:	8c 84       	ldd	r8, Y+12	; 0x0c
    1748:	9b 84       	ldd	r9, Y+11	; 0x0b
    174a:	aa 84       	ldd	r10, Y+10	; 0x0a
    174c:	b9 84       	ldd	r11, Y+9	; 0x09
    174e:	c8 84       	ldd	r12, Y+8	; 0x08
    1750:	df 80       	ldd	r13, Y+7	; 0x07
    1752:	ee 80       	ldd	r14, Y+6	; 0x06
    1754:	fd 80       	ldd	r15, Y+5	; 0x05
    1756:	0c 81       	ldd	r16, Y+4	; 0x04
    1758:	1b 81       	ldd	r17, Y+3	; 0x03
    175a:	aa 81       	ldd	r26, Y+2	; 0x02
    175c:	b9 81       	ldd	r27, Y+1	; 0x01
    175e:	ce 0f       	add	r28, r30
    1760:	d1 1d       	adc	r29, r1
    1762:	0f b6       	in	r0, 0x3f	; 63
    1764:	f8 94       	cli
    1766:	de bf       	out	0x3e, r29	; 62
    1768:	0f be       	out	0x3f, r0	; 63
    176a:	cd bf       	out	0x3d, r28	; 61
    176c:	ed 01       	movw	r28, r26
    176e:	08 95       	ret

00001770 <__umulhisi3>:
    1770:	a2 9f       	mul	r26, r18
    1772:	b0 01       	movw	r22, r0
    1774:	b3 9f       	mul	r27, r19
    1776:	c0 01       	movw	r24, r0
    1778:	a3 9f       	mul	r26, r19
    177a:	70 0d       	add	r23, r0
    177c:	81 1d       	adc	r24, r1
    177e:	11 24       	eor	r1, r1
    1780:	91 1d       	adc	r25, r1
    1782:	b2 9f       	mul	r27, r18
    1784:	70 0d       	add	r23, r0
    1786:	81 1d       	adc	r24, r1
    1788:	11 24       	eor	r1, r1
    178a:	91 1d       	adc	r25, r1
    178c:	08 95       	ret

0000178e <_exit>:
    178e:	f8 94       	cli

00001790 <__stop_program>:
    1790:	ff cf       	rjmp	.-2      	; 0x1790 <__stop_program>
